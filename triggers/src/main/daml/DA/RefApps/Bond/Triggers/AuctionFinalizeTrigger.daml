--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.Bond.Triggers.AuctionFinalizeTrigger where

import Daml.Script (Script, script)
import qualified Daml.Script as Script
import Daml.Trigger
import DA.Foldable hiding (length)
import Daml.Trigger.Assert
import DA.Assert
import DA.RefApps.Bond.Test.FullScenario qualified as MarketSetup
import DA.RefApps.Bond.Test.Common.Parties qualified as MarketSetup
import DA.RefApps.Bond.Test.Common.Types qualified as MarketSetup
import DA.RefApps.Bond.Roles.IssuerRole
import DA.Finance.Asset
import DA.Finance.Asset.Settlement

import DA.RefApps.Bond.Auction

import DA.Either
import DA.Optional

import DA.RefApps.Bond.Lock
import DA.RefApps.Bond.Test.Triggers.TriggerTestUtils
import DA.List (sort)

auctionFinalizeTrigger : Trigger ()
auctionFinalizeTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = finalizeAuction
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @AuctionBid,
      registeredTemplate @AuctionFinalizeBotTrigger,
      registeredTemplate @BidderParticipation
    ]
  , heartbeat = None
  }

finalizeAuction : Party -> TriggerA () ()
finalizeAuction party = do
  bidContracts <- query @AuctionBid
  triggerContracts <- query @AuctionFinalizeBotTrigger
  participationContracts <- query @BidderParticipation

  forA_ triggerContracts $ \(triggerCid, trigger) -> do
    let matchingParticipationCids =
            getMatching trigger.auctionAgent trigger.auctionName participationContracts
        matchingBidCids =
            getMatching trigger.auctionAgent trigger.auctionName bidContracts
    dedupExercise triggerCid AuctionFinalizeBotTrigger_AllocateBond with
        participationCids = matchingParticipationCids
        bidCids = matchingBidCids
  where
    getMatching auctionAgent auctionName contracts =
      [ cid | (cid, b) <- contracts,
              b.auctionName == auctionName,
              b.auctionAgent == auctionAgent ]

-- Tests ---------------------------

testAuctionWithNoBid: Script ()
testAuctionWithNoBid = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties

  issuance <-
    MarketSetup.setupIssuance parties
  (auction, [participation1, participation2]) <-
    startAuction parties issuance

  finalizeTrigger <-
    auctionAgent `submit`
      Script.exerciseCmd auction Auction_Finalize

  let activeContracts =
          toACS participation1
            <> toACS participation2
            <> toACS finalizeTrigger
  flattenedCommands <- testTrigger auctionFinalizeTrigger auctionAgent activeContracts

  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid finalizeTrigger
    assertEqChoices choiceArg (AuctionFinalizeBotTrigger_AllocateBond [participation1, participation2] [])

testAuctionWithSingleBid: Script ()
testAuctionWithSingleBid = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties
  issuance <-
    MarketSetup.setupIssuance parties
  (auction, [participation1, participation2]) <-
    startAuction parties issuance
  (bid1, _, _) <-
    placeBid
      bank1 42.0 20000
      participation1 issuance.cashAssets.bank1CashDepositCid
      issuance.rules.bank1LockRuleCid
      issuance.rules.bank1BondSettlementCid

  finalizeTrigger <-
    auctionAgent `submit`
      Script.exerciseCmd auction Auction_Finalize

  let activeContracts =
          toACS participation1 <> toACS participation2 <>
          toACS bid1 <> toACS finalizeTrigger
  flattenedCommands <- testTrigger auctionFinalizeTrigger auctionAgent activeContracts
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid finalizeTrigger
    assertEqChoices choiceArg (AuctionFinalizeBotTrigger_AllocateBond [participation1, participation2] [bid1])

testAuctionWithTwoBids: Script ()
testAuctionWithTwoBids = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties
  issuance <-
    MarketSetup.setupIssuance parties
  (auction, [participation1, participation2]) <-
    startAuction parties issuance
  (bid1, _, _) <-
    placeBid
      bank1 42.0 20000
      participation1 issuance.cashAssets.bank1CashDepositCid
      issuance.rules.bank1LockRuleCid
      issuance.rules.bank1BondSettlementCid
  (bid2, _, _) <-
    placeBid
      bank2 43.0 20000
      participation2 issuance.cashAssets.bank2CashDepositCid
      issuance.rules.bank2LockRuleCid
      issuance.rules.bank2BondSettlementCid

  finalizeTrigger <-
    auctionAgent `submit`
      Script.exerciseCmd auction Auction_Finalize

  let activeContracts =
          toACS participation1 <> toACS participation2 <>
          toACS bid1 <> toACS bid2 <> toACS finalizeTrigger
  flattenedCommands <- testTrigger auctionFinalizeTrigger auctionAgent activeContracts
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid finalizeTrigger
    assertEqChoices choiceArg (AuctionFinalizeBotTrigger_AllocateBond [participation2, participation1] [bid2, bid1])

-- Helpers -------------------------

assertEqChoices: AuctionFinalizeBotTrigger_AllocateBond -> AuctionFinalizeBotTrigger_AllocateBond -> Either Text ()
assertEqChoices lhs rhs = do
  sorted lhs === sorted rhs
 where
  sorted c = c with participationCids = sort c.participationCids

startAuction : MarketSetup.Parties -> MarketSetup.TestIssuance -> Script (ContractId Auction, [ContractId BidderParticipation])
startAuction MarketSetup.Parties{..} issuance = script do
  commissionedCid <- submit issuer do
    Script.exerciseCmd issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = issuance.bondBundleData.assetDepositCid
      startDate = MarketSetup.auctionStartDate
      endDate = MarketSetup.auctionEndDate
      minPrice = 40.0
      size = 1000000
  (auctionInvitationCid, _remainingAssets) <- submit issuer do
    Script.exerciseCmd commissionedCid CommissionBotTrigger_InviteAgent with
      bondAssetSettlementCid = issuance.bondBundleData.bondSettlementCid
      cashAssetSettlementCid = issuance.bondBundleData.cashSettlementCid
      fixedRateBondFactCid = issuance.fixedRateBondFactCid
      bondAccount = issuance.bondBundleData.bondAccount
      cashAccount = issuance.bondBundleData.cashAccount

  auctionCid <- submit auctionAgent do
    Script.exerciseCmd auctionInvitationCid AuctionInvitation_Accept with
      auctionName = "testAuction"
  submit auctionAgent do
    Script.exerciseCmd auctionCid Auction_InviteBidders with
      bidders = [bank1, bank2]

placeBid : Party -> Decimal -> Int -> ContractId BidderParticipation -> ContractId AssetDeposit
            -> ContractId AssetLockRule -> ContractId AssetSettlementRule
            -> Script (ContractId AuctionBid, [ContractId AssetDeposit], ContractId AuctionLockedCash)
placeBid bank price quantity bidderParticipationCid bankCashDepositCid
    bankLockRuleCid bankBondSettlementCid = script do
  bidLockReq <- submit bank do
    Script.exerciseCmd bidderParticipationCid BidderParticipation_PlaceBid with ..
  Some bankSettlement <- Script.queryContractId bank bankBondSettlementCid

  lockCashResult <- submit bank do
    Script.exerciseCmd bidLockReq PlaceBidBotTrigger_LockCash with
      cashDepositCids = [bankCashDepositCid]
      lockRuleCid = bankLockRuleCid
      investorAccount = bankSettlement.account

  let (bank1Lock1, bidCid1_1, rest) = fromSome $ eitherToOptional $ lockCashResult
  return (bidCid1_1, rest, bank1Lock1)
