--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.Bond.Triggers.PlaceBidTrigger where

import Daml.Script (Script, script)
import qualified Daml.Script as Script
import Daml.Trigger
import Daml.Trigger.Assert
import DA.Assert
import DA.RefApps.Bond.Test.FullScenario qualified as MarketSetup
import DA.RefApps.Bond.Auction
import DA.Optional
import DA.Finance.Asset
import DA.RefApps.Bond.Lock
import DA.List.Total
import DA.RefApps.Bond.Triggers.AuctionFinalizeTrigger qualified as AuctFin
import DA.RefApps.Bond.ContractUtils
import DA.RefApps.Bond.Test.Triggers.TriggerTestUtils

placeBidTrigger : Trigger ()
placeBidTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = placeBidRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @PlaceBidBotTrigger,
      registeredTemplate @AssetDeposit,
      registeredTemplate @AssetSettlementRule,
      registeredTemplate @AssetDeposit,
      registeredTemplate @AssetLockRule
    ]
  , heartbeat = None
  }

placeBidRule : Party -> TriggerA () ()
placeBidRule party = do
  mbLockRequests <- query @PlaceBidBotTrigger
  assetDeposits <- query @AssetDeposit
  assetLockRules <- query @AssetLockRule
  assetSettlements <- query @AssetSettlementRule
  assetFungibles <- query @AssetDeposit

  whenSome (head mbLockRequests) $ \(triggerCid, trigger) -> do
    let investorBondAssetSettlementCid =
          findAsset
            trigger.bondProvider
            trigger.bidder
            assetSettlements
        cashAssetFungibleCid =
          findAsset
            trigger.cashProvider
            trigger.bidder
            assetFungibles
    let lockRuleCid =
          getLockRuleCid trigger.cashProvider assetLockRules
        cashDepositCids =
          getAssetDepositCids trigger.cashAssetId assetDeposits
    dedupExercise triggerCid PlaceBidBotTrigger_LockCash with
        cashDepositCids
        cashAssetFungibleCid
        lockRuleCid
        investorBondAssetSettlementCid
  where
    getLockRuleCid provider lockRules =
      headNote "Can't find any matching LockRule contract" $
        filterContractIds (\c -> c.account.provider == provider) lockRules

    getAssetDepositCids assetId assetDeposits =
      filterContractIds (\p -> p.asset.id.label == assetId.label && p.asset.id.version == assetId.version) $
        assetDeposits


-- Tests ---------------------------

testPlaceBidTrigger: Script ()
testPlaceBidTrigger = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties

  issuance <-
    MarketSetup.setupIssuance parties
  (_, [participation1, _]) <-
    AuctFin.startAuction parties issuance
  pbTrigger <-
    placeBid bank1 42.0 20000 participation1

  let activeContracts =
          toACS pbTrigger <>
          toACS issuance.cashAssets.bank1CashDepositCid <>
          toACS issuance.rules.bank1CashFungibleCid <>
          toACS issuance.rules.bank1LockRuleCid <>
          toACS issuance.rules.bank1BondSettlementCid
  flattenedCommands <- testTrigger placeBidTrigger bank1 activeContracts
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid pbTrigger
    assertEq choiceArg (PlaceBidBotTrigger_LockCash with
        cashDepositCids = [issuance.cashAssets.bank1CashDepositCid]
        cashAssetFungibleCid = issuance.rules.bank1CashFungibleCid
        lockRuleCid = issuance.rules.bank1LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank1BondSettlementCid)

testNothingHappensIfNoTrigger: Script ()
testNothingHappensIfNoTrigger = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties
  issuance <-
    MarketSetup.setupIssuance parties
  AuctFin.startAuction parties issuance

  let activeContracts =
          toACS issuance.cashAssets.bank1CashDepositCid <>
          toACS issuance.rules.bank1CashFungibleCid <>
          toACS issuance.rules.bank1LockRuleCid <>
          toACS issuance.rules.bank1BondSettlementCid
  flattenedCommands <- testTrigger  placeBidTrigger bank1 activeContracts
  length flattenedCommands === 0

-- Helpers -------------------------

placeBid : Party -> Decimal -> Int -> ContractId BidderParticipation
            -> Script (ContractId PlaceBidBotTrigger)
placeBid bank price quantity bidderParticipationCid =
  submit bank $
    Script.exerciseCmd bidderParticipationCid BidderParticipation_PlaceBid with
      price = price
      quantity = quantity
