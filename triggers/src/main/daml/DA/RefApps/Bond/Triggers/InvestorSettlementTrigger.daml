--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.Bond.Triggers.InvestorSettlementTrigger where

import Daml.Trigger
import DA.Foldable

import DA.RefApps.Bond.Settlement
import DA.RefApps.Bond.Lock
import DA.RefApps.Bond.ContractUtils

import DA.Finance.Asset
import DA.Finance.Asset.Settlement

investorSettlementTrigger: Trigger ()
investorSettlementTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = finalizeSettlements
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @InvestorSettlement,
      registeredTemplate @AuctionLockedCash,
      registeredTemplate @AssetSettlementRule,
      registeredTemplate @AssetDeposit
    ]
  , heartbeat = None
  }

finalizeSettlements: Party -> TriggerA () ()
finalizeSettlements party = do
  investorSettlements <- query @InvestorSettlement
  auctionLockedCashes <- query @AuctionLockedCash
  assetSettlements <- query @AssetSettlementRule
  assetFungibles <- query @AssetDeposit

  forA_
    investorSettlements
    (finalizeSettlement auctionLockedCashes assetSettlements assetFungibles)

finalizeSettlement:
  [Contract AuctionLockedCash] ->
  [Contract AssetSettlementRule] ->
  [Contract AssetDeposit] ->
  Contract InvestorSettlement ->
  TriggerA () ()
finalizeSettlement auctionLockedCashes assetSettlements assetFungibles settlementContract = do
  let
    (id, settlement) = settlementContract
    (_, assetSettlement) = findAsset settlement.cashProvider settlement.investor assetSettlements
    auctionLockedCashIds =
      case (findAuctionLockedCashes auctionLockedCashes settlement.auctionAgent settlement.auctionName) of
        [] -> error ("Can't find any auction locks for this auction: " <> settlement.auctionName)
        result -> fst <$> result

  id `dedupExercise` InvestorSettlement_Finalize auctionLockedCashIds assetSettlement.account
