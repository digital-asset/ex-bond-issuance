--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE ApplicativeDo #-}
module DA.RefApps.Bond.MarketSetup.MarketSetup where

import DA.Date
import DA.Time
import DA.Action

import Daml.Script
import DA.RefApps.Bond.Roles.CentralBankRole
import DA.RefApps.Bond.Roles.CsdRole
import DA.RefApps.Bond.Roles.OperatorRole
import DA.RefApps.Bond.Roles.BankRole
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.Roles.AuctionAgentRole
import DA.RefApps.Bond.Util
import DA.RefApps.Bond.Auction
import DA.RefApps.Bond.Settlement
import DA.RefApps.Bond.Redemption
import DA.Foldable (forA_)
import DA.RefApps.Bond.Test.Common.Parties
import DA.RefApps.Bond.Test.Common.Types

-- | A contract with the operator's and a party's signature. This can
-- be used then to setup the market.
template MarketSetupSignature
  with
    operator : Party
    marketParticipant : Party
  where
    signatory operator, marketParticipant
    controller operator can
      MarketSetupSignature_UseSignature : ContractId MarketSetup
        with
          targetContractId: ContractId MarketSetup
        do
          exercise targetContractId MarketSetup_Sign with signer = marketParticipant

-- | A contract that can create signature contracts for the parties. Given all of these,
-- the operator can setup the market.
template MarketSetupSignatureCreator
  with
    operator : Party
    regulator: Party
    auctionAgent: Party
    bank1: Party
    bank2: Party
    bank3: Party
    csd: Party
    issuer: Party
    centralBank: Party
    signatories: [Party]
  where
    observer [operator, regulator, auctionAgent, bank1, bank2, bank3,
                    csd, issuer, centralBank]
    signatory operator
    nonconsuming choice MarketSetupSignatureCreator_CreateSignature : ContractId MarketSetupSignature with
        marketParticipant : Party
      controller marketParticipant
        do
          let everyone = [operator, regulator, auctionAgent, bank1, bank2, bank3,
                          csd, issuer, centralBank]
          assertMsg "Only market participants can exercise this choice."
                            $ marketParticipant `elem` everyone
          create MarketSetupSignature with ..
    controller operator can
      MarketSetupSignatureCreator_SetupMarket : MarketSetupData
        with
          signatures : [ContractId MarketSetupSignature]
        do
          marketSetupCid <- create MarketSetup with ..
          signedMarketSetupCid
            <- foldlA
                  (\targetContractId marketSetupSignatureCid ->
                    exercise marketSetupSignatureCid MarketSetupSignature_UseSignature with ..)
                  marketSetupCid
                  signatures
          exercise signedMarketSetupCid MarketSetup_SetupMarket

-- | A contract that can perform market setup via its "Setup Market" choice
-- if every market participant has signed it. Signing is done by the market
-- participants via the "Sign" choice.
-- One needs to use this pattern to avoid having to write a market setup
-- scenario which can only by used in Sandbox (no production ledger supports this).
template MarketSetup
  with
    operator : Party
    regulator : Party
    auctionAgent: Party
    bank1 : Party
    bank2 : Party
    bank3 : Party
    csd : Party
    issuer : Party
    centralBank : Party
    signatories : [Party]
  where
    signatory signatories
    observer operator, regulator, auctionAgent, bank1, bank2, bank3, csd, issuer, centralBank
    choice MarketSetup_Sign : ContractId MarketSetup with
        signer : Party
      controller operator, signer
        do
          create this with signatories = signer :: signatories
    controller operator can
      MarketSetup_SetupMarket : MarketSetupData
        do
          let
              tenMillion : Numeric 10 = 10.0^7
              parties = Parties with ..
              accounts@AccountCreation{..} = getAccounts parties
              bankCashAccounts = toBankCashAccounts accounts
              bankBondAccounts = toBankBondAccounts accounts

          operatorCid <- create OperatorRole with regulators = [regulator], ..
          auctionAgentInvitationCid <- exercise operatorCid OperatorRole_InviteAuctionAgent with ..
          invites <-
            forA (banks parties) $
              \bank -> exercise operatorCid OperatorRole_InviteBank with ..

          csdInvitationCid
            <- exercise operatorCid OperatorRole_InviteCsd with ..
          issuerCid
            <- exercise operatorCid OperatorRole_InviteIssuer with
                  bondProvider = csd
                  cashProvider = centralBank
                  ..
          centralBankCid
            <- exercise operatorCid OperatorRole_InviteCentralBank with ..
          exercise auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

          forA_ invites $
            \invitation -> exercise invitation BankRoleInvitation_Accept

          csdRoleCid <- exercise csdInvitationCid CsdRoleInvitation_Accept
          issuerRole <- exercise issuerCid IssuerRoleInvitation_Accept
          centralBankRoleCid <- exercise centralBankCid CentralBankRoleInvitation_Accept

          (cashBank1:: _) <-
            mapA (\(account, cashAmount) -> exercise centralBankRoleCid $ CentralBankRole_IssueCash account "USD" cashAmount)
            (bankCashAccounts `zip` ((* tenMillion) <$> [5.0, 6.0, 5.0]))

          exercise centralBankRoleCid $
              CentralBankRole_IssueCash issuerCashAccount "USD" tenMillion

          (settBank1Cash:: _) <-
            forA bankCashAccounts (\account -> exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule account[])

          settIssCash <-
              exercise centralBankRoleCid $
                CentralBankRole_CreateSettlementRule issuerCashAccount (banks parties)

          (lockBank1:: _) <-
            forA bankCashAccounts (exercise centralBankRoleCid . CentralBankRole_CreateLockRule)

          forA_ bankBondAccounts $
              \account -> exercise csdRoleCid $ CsdRole_CreateFungibleRule account []

          funIss <-
              exercise csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]

          (settBank1:: _) <-
            forA bankBondAccounts (\account -> exercise csdRoleCid $ CsdRole_CreateSettlementRule account [])

          settIss <-
              exercise csdRoleCid $
                CsdRole_CreateSettlementRule issuerBondAccount (auctionAgent :: banks parties)

          return $ MarketSetupData with ..

testMarketSetupContract: Script ()
testMarketSetupContract = script do
  Parties{..} <- allocateParties
  let parties = [auctionAgent, bank1, bank2, bank3, csd, issuer, centralBank]
  signatureCreatorCid <-
    submit operator do createCmd MarketSetupSignatureCreator with signatories = [operator], ..
  void $ forA parties (\party -> submit party $ exerciseCmd signatureCreatorCid $ MarketSetupSignatureCreator_CreateSignature party)
    >>= \signatures -> submit operator do
    exerciseCmd signatureCreatorCid MarketSetupSignatureCreator_SetupMarket {..}

-- | Initial setup of the market participants and some cash
testMarketSetup: Script MarketSetupData
testMarketSetup = script do
  parties@Parties{..} <- allocateParties
  operatorCid <- submit operator do
    createCmd OperatorRole with regulators = [regulator], ..
  roleInvite@RoleInvite{..}
    <- operator `submit` do
      auctionAgentInvitationCid
        <- exerciseCmd operatorCid OperatorRole_InviteAuctionAgent {..}

      bankInvitationCid1
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank1
      bankInvitationCid2
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank2
      bankInvitationCid3
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank3
      csdInvitationCid
        <- exerciseCmd operatorCid OperatorRole_InviteCsd {..}
      issuerCid
        <- exerciseCmd operatorCid OperatorRole_InviteIssuer with
              bondProvider = csd
              cashProvider = centralBank
              ..
      centralBankCid
        <- exerciseCmd operatorCid OperatorRole_InviteCentralBank with ..
      return RoleInvite with ..

  auctionAgent `submit` do
    exerciseCmd auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

  forA_ (banks parties `zip` bankInvitationCids roleInvite) $
      \(bank, invitation) -> bank `submit`
      exerciseCmd invitation BankRoleInvitation_Accept

  csdRoleCid <- csd `submit`
    exerciseCmd csdInvitationCid CsdRoleInvitation_Accept

  issuerRole <- issuer `submit`
    exerciseCmd issuerCid IssuerRoleInvitation_Accept

  centralBankRoleCid <- centralBank `submit`
    exerciseCmd centralBankCid CentralBankRoleInvitation_Accept

  let tenMillion : Numeric 10 = 10.0^7
      accounts@AccountCreation{..} = getAccounts parties
      bankCashAccounts = toBankCashAccounts accounts
      bankBondAccounts = toBankBondAccounts accounts
      allAccounts = issuerCashAccount :: bankCashAccounts
      centralbankIssuance = ("USD", ) . (* tenMillion) <$> [10.0, 5.0, 60.0, 5.0]

  [issuerCash, cashBank1, cashbank2, cashBank3]
    <- forA (centralbankIssuance `zip` allAccounts) $ \((currency, cashAmount), account) ->
      centralBank `submit`
      exerciseCmd centralBankRoleCid $ CentralBankRole_IssueCash account currency cashAmount

  settBank1Cash :: _ <- forA bankCashAccounts $
   \account -> centralBank `submit` exerciseCmd centralBankRoleCid $ CentralBankRole_CreateSettlementRuleId account []

  settIssCash <- centralBank `submit` exerciseCmd centralBankRoleCid $ CentralBankRole_CreateSettlementRule issuerCashAccount (banks parties)
  lockBank1 :: _ <- forA bankCashAccounts $
   \account -> centralBank `submit` exerciseCmd centralBankRoleCid $ CentralBankRole_CreateLockRule account

  forA_ bankBondAccounts $
   \account -> csd `submit`
    exerciseCmd csdRoleCid $ CsdRole_CreateFungibleRule account []

  funIss <- csd `submit` exerciseCmd csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]

  settBank1::_ <- forA bankBondAccounts $
   \account -> csd `submit`
    exerciseCmd csdRoleCid $ CsdRole_CreateSettlementRule account []

  settIss <- csd `submit` do exerciseCmd csdRoleCid $ CsdRole_CreateSettlementRule issuerBondAccount (auctionAgent::banks parties)

  -- setup time
  now <- getTime
  setTime (time (date 2019 Apr 1) 0 0 0)
  return $ MarketSetupData with ..

testMarketSetupFull: Script [ContractId RedemptionPayoutInfo]
testMarketSetupFull = script $ do
  MarketSetupData issuer issuerRole csd auctionAgent bank1
                  funIss settIss settIssCash cashBank1
                  bank1BondAccount bank1CashAccount lockBank1 <- testMarketSetup
  issuanceReq <- submit issuer do
    exerciseCmd issuerRole $ IssuerRole_Issuance with
                            issueSize = 100
                            issueDate = date 2019 Jul 1
                            currency = "USD"
                            denomination = 1.0
                            maturityDate = date 2019 Jul 31
                            couponRate = 0.01
                            couponDates = []

  (bondFact, bondAssetDeposit) <- submit csd do
    exerciseCmd issuanceReq $ IssuanceRequest_Accept "BOND007"

  commissionBotTrigger <- submit issuer do
    exerciseCmd issuerRole $ IssuerRole_CommissionAuction with
          bondAssetDepositCid = bondAssetDeposit
          startDate = date 2019 Jul 1
          endDate = date 2019 Jul 2
          minPrice = 1.0
          size = 100

  (auctionInv, _) <- submit issuer do
    exerciseCmd commissionBotTrigger $ CommissionBotTrigger_InviteAgent with
          bondAssetSettlementCid = settIss
          cashAssetSettlementCid = settIssCash
          fixedRateBondFactCid = bondFact
          bondAccount = bank1BondAccount
          cashAccount = bank1CashAccount

  auction <- submit auctionAgent do
    exerciseCmd auctionInv $ AuctionInvitation_Accept "auction1"

  setTime (time (date 2019 Jul 1) 0 0 0)

  (auction', [bidderPar]) <- submit auctionAgent do
    exerciseCmd auction $ Auction_InviteBidders [bank1]

  pbbTrigger <- submit bank1 do
    exerciseCmd bidderPar $ BidderParticipation_PlaceBid with
      price = 1.0
      quantity = 100

  Right(lockedCash, auctionBid, _) <- submit bank1 do
    exerciseCmd pbbTrigger $ PlaceBidBotTrigger_LockCash with
          cashDepositCids = [cashBank1]
          lockRuleCid = lockBank1
          investorAccount = bank1BondAccount

  setTime (time (date 2019 Jul 2) 0 0 0)
  afTrigger <- submit auctionAgent do
    exerciseCmd auction' Auction_Finalize

  ([settReq], _) <- submit auctionAgent do
    exerciseCmd afTrigger $ AuctionFinalizeBotTrigger_AllocateBond with
          participationCids = [bidderPar]
          bidCids = [auctionBid]

  isbTrigger <- submit bank1 do
    exerciseCmd settReq AuctionParticipantSettleRequest_Settle

  submit bank1 do
    exerciseCmd isbTrigger $ InvestorSettlement_Finalize with
          auctionLockedCashCids = [lockedCash]
          investorCashSettlementCid = bank1CashAccount
