--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Redemption where

import DA.Date
import DA.List
import DA.Optional

import DA.Finance.Types
import DA.Finance.Rule.Trade.Dvp
import DA.Finance.Rule.Asset
import DA.Finance.Fact.Asset

import DA.RefApps.Bond.FixedRateBond
import DA.RefApps.Bond.Util

{-
-    InvestorSettlementBotTrigger_Finalize   +----------------------+
-   ---------------------------------------->| RedemptionPayoutInfo |---------------------+
-                                            +----------------------+                     |
- Redemption process:                                                                     |
-   IssuerRole_Redeem  ---+                                                               |
-                         | (issuer)                                                      |
-                         v                                                               v
-               +--------------------+  Accept   +---------------------------------+    Start     +-----------------------+   Finalize
-               | RedemptionRequest  |---------->| RedemptionCalculationBotTrigger | -----------> | RedemptionFinalizer   |------------>
-               +--------------------+  (CSD)    +---------------------------------+    (CSD)     +-----------------------+    (Issuer)
-}

-- The finalization of the auction settlement creates a set of `RedemptionPayoutInfo` contracts
-- corresponding to each DvP. These contracts contain the relevant party and account information
-- required for a redemption when it is due
template RedemptionPayoutInfo
  with
    issuer: Party
    investor: Party
    bondInstrumentId: Id
    bondAccountProvider: Party
    investorCashAccount: Account
    settlementResult: DvpSettlement_Process_Result
    investorCashAssetSettlementCid: ContractId AssetSettlement
    regulators: [Party]
  where
    signatory investor
    observer bondAccountProvider :: regulators

    controller issuer can
      RedemptionPayoutInfo_Redeem: ContractId AssetDeposit
        with
          cashAssetDepositCid: ContractId AssetDeposit
          issuerCashAssetSettlementCid: ContractId AssetSettlement
          bondArchivalRequestCid: ContractId BondArchivalRequest
          fixedRateBondFactCid: ContractId FixedRateBondFact
        do
          -- date check
          now <- getTime
          let today = toDateUTC now
          fixedRateBondFact <- fetch fixedRateBondFactCid
          let maturityDate = fixedRateBondFact.maturityDate
          assertMsg ("Only final redemption supported: " <> show maturityDate) $ maturityDate == today

          -- quantity check
          bondDeposit <- fetch $ head $ head settlementResult.deliveryDepositCids
          let quantity = fixedRateBondFact.denomination * (1.0 + fixedRateBondFact.rate) * bondDeposit.asset.quantity
          cashAssetFact <- fetch cashAssetDepositCid
          assertMsg ("Cash asset quantity should be " <> (show quantity)) $ quantity == cashAssetFact.asset.quantity

          -- archive the bond asset
          exercise bondArchivalRequestCid BondArchivalRequest_Archive

          -- transfer
          exercise issuerCashAssetSettlementCid $ AssetSettlement_Transfer investor cashAssetDepositCid investorCashAssetSettlementCid

-- The issuer can initiate a redemption at the bond account provider using this contract.
-- The `RedemptionRequest_Accept` choice creates a trigger contract which is picked
-- up by the redemption calculation bot.
template RedemptionRequest
  with
    issuer: Party
    provider: Party
    fixedRateBondFactCid: ContractId FixedRateBondFact
    isin: Text
    regulators: [Party]
  where
    signatory issuer
    observer regulators

    controller provider can
      RedemptionRequest_Accept: ContractId RedemptionCalculationBotTrigger
        do
          bond <- fetch fixedRateBondFactCid
          create RedemptionCalculationBotTrigger with
              issuer = issuer
              provider = provider
              fixedRateBondFactCid = fixedRateBondFactCid
              bondAssetId = bond.instrumentId
              cashAssetId = bond.cashAssetId
              regulators = regulators

-- Triggers the redemption calculation bot. The bot collects the relevant bond assets
-- and `RedemptionPayoutInfo`s and calculates the final coupon and creates cash
-- transfers to each of the investors.
-- It also archives the bonds that weren't sold at all.
template RedemptionCalculationBotTrigger
  with
    issuer: Party
    provider: Party
    fixedRateBondFactCid: ContractId FixedRateBondFact
    bondAssetId: Id
    cashAssetId: Id
    regulators: [Party]
  where
    signatory issuer, provider
    observer regulators

    controller provider can
      RedemptionCalculationBotTrigger_Start: ContractId RedemptionFinalizeBotTrigger
        with
          redemptionPayoutInfos: [ContractId RedemptionPayoutInfo]
          bondsAtIssuer: [ContractId AssetDeposit]
        do
          fixedRateBond <- fetch fixedRateBondFactCid
          let bondInstrumentId = fixedRateBond.instrumentId

          -- archive the bonds left at issuer
          forA bondsAtIssuer \depositCid -> do
            deposit <- fetch depositCid
            assertMsg ("Account owner of bondsAtIssuer should be " <> show issuer) $ deposit.account.owner == issuer
            let factInstrumentId = deposit.asset.id
            assertMsg ("Identifier of the asset [" <> show factInstrumentId <> "] should match the bond [" <> show bondInstrumentId) $
              factInstrumentId == bondInstrumentId
            archive depositCid

          -- proceed with redemption of the sold bonds
          zippedInstructions <- forA redemptionPayoutInfos \redemptionPayoutInfoCid -> do
            payoutInfo <- fetch redemptionPayoutInfoCid
            let bondAssetDepositCid = head $ head payoutInfo.settlementResult.deliveryDepositCids
            asset <- fetch bondAssetDepositCid
            assertMsg ("Bond owner [" <> (show asset.account.owner) <> "] and account owner [" <> (show payoutInfo.investor) <> "] should be the same") $
              asset.account.owner == payoutInfo.investor
            assertMsg ("Asset fact instrumentId [" <> show asset.asset.id <> "] should match " <> show bondInstrumentId) $
              asset.asset.id == bondInstrumentId
            assertMsg ("RedemptionPayoutInfo instrumentId [" <> show payoutInfo.bondInstrumentId <> "] should match " <> show bondInstrumentId) $
              payoutInfo.bondInstrumentId == bondInstrumentId
            arcReq <- create BondArchivalRequest with
              provider = provider
              issuer = issuer
              owner = payoutInfo.investor
              bondAssetDepositCid = bondAssetDepositCid
              regulators = regulators
            let payment = fixedRateBond.denomination * (1.0 + fixedRateBond.rate) * asset.asset.quantity
                instruction = RedemptionInstruction with
                    issuer = issuer
                    provider = provider
                    investor = payoutInfo.investor
                    payment = payment
                    bondAssetId = fixedRateBond.instrumentId
                    currency = fixedRateBond.cashAssetId.label
                    bondAssetDepositCid = bondAssetDepositCid
                    redemptionPayoutInfoCid = redemptionPayoutInfoCid
                    fixedRateBondFactCid = fixedRateBondFactCid
                    bondArchivalRequestCid = arcReq
            return (instruction, payoutInfo.investorCashAccount.provider)
          let (instructions, cashProviders) = unzip zippedInstructions
          finalizer <- create RedemptionFinalizeBotTrigger with
            issuer = issuer
            bondAccountProvider = provider
            instructions = instructions
            cashAccountProvider = head cashProviders
            cashAssetId = fixedRateBond.cashAssetId
            regulators = regulators

          return finalizer

data RedemptionInstruction = RedemptionInstruction
  with
    issuer: Party
    provider: Party
    investor: Party
    payment: Decimal
    bondAssetId: Id
    currency: Text
    bondAssetDepositCid: ContractId AssetDeposit
    redemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
    fixedRateBondFactCid: ContractId FixedRateBondFact
    bondArchivalRequestCid: ContractId BondArchivalRequest
  deriving (Eq, Show)

processInstructions: [RedemptionInstruction] ->
                     [ContractId AssetDeposit] ->
                     ContractId AssetFungible ->
                     ContractId AssetSettlement ->
                     [ContractId AssetDeposit] ->
                     Update [ContractId AssetDeposit]
processInstructions instructions cashAssetDepositCids cashAssetFungibleCid cashAssetSettlementCid payments
  | length instructions == 0 = do return payments
  | otherwise = do
      let instruction :: otherInstructions = instructions
      let firstCid = head cashAssetDepositCids
      firstCashDeposit <- fetch firstCid
      mergeResult <- mergeForQuantity firstCid firstCashDeposit (tail cashAssetDepositCids) instruction.payment cashAssetFungibleCid
      assertMsg "Cash assets should suffice when paying out on redemption" $ isSome mergeResult
      let (merged, remainingAssets)  = fromSome $ mergeResult
      payoutInfo <- fetch instruction.redemptionPayoutInfoCid
      payment <- exercise instruction.redemptionPayoutInfoCid RedemptionPayoutInfo_Redeem with
        cashAssetDepositCid = merged
        issuerCashAssetSettlementCid = cashAssetSettlementCid
        bondArchivalRequestCid = instruction.bondArchivalRequestCid
        fixedRateBondFactCid = instruction.fixedRateBondFactCid
      processInstructions otherInstructions remainingAssets cashAssetFungibleCid cashAssetSettlementCid (payment :: payments)

-- Triggers the redemption finalize bot which accepts the redemption payment
-- on behalf of the investor.
template RedemptionFinalizeBotTrigger
  with
    issuer: Party
    bondAccountProvider: Party
    instructions: [RedemptionInstruction]
    cashAccountProvider: Party
    cashAssetId: Id
    regulators: [Party]
  where
    signatory issuer, bondAccountProvider
    observer regulators

    controller issuer can
      RedemptionFinalizeBotTrigger_Finalize: [ContractId AssetDeposit]
        with
          cashAssetDepositCids: [ContractId AssetDeposit] -- the cash assets this choice can merge and split the required payment from
          cashAssetSettlementCid: ContractId AssetSettlement
          cashAssetFungibleCid: ContractId AssetFungible
        do
          assertMsg "Cash asset parameter should not be empty" $ (length cashAssetDepositCids) > 0
          processInstructions instructions cashAssetDepositCids cashAssetFungibleCid cashAssetSettlementCid []

-- Helper contract to archive the bond assets (which needs signature of both
-- the investor and the provider (CSD))
template BondArchivalRequest
  with
    provider: Party
    owner: Party
    issuer: Party
    bondAssetDepositCid: ContractId AssetDeposit
    regulators: [Party]
  where
    signatory provider
    observer regulators

    controller owner can
      BondArchivalRequest_Archive: ()
        do archive bondAssetDepositCid
