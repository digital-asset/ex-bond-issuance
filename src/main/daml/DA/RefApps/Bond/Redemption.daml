--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module DA.RefApps.Bond.Redemption where

import DA.List
import DA.List.Total qualified as TotalList
import DA.Optional
import DA.Foldable (forA_)

import DA.Finance.Types
import DA.Finance.Asset
import DA.Finance.Asset.Settlement
import DA.Finance.Trade.Dvp.Settlement

import DA.RefApps.Bond.FixedRateBond
import DA.RefApps.Bond.Util

{-
-    InvestorSettlement_Finalize             +----------------------+
-   ---------------------------------------->| RedemptionPayoutInfo |---------------------+
-                                            +----------------------+                     |
- Redemption process:                                                                     |
-   IssuerRole_Redeem  ---+                                                               |
-                         | (issuer)                                                      |
-                         v                                                               v
-               +--------------------+  Accept   +---------------------------------+    Start     +-----------------------+   Finalize
-               | RedemptionRequest  |---------->| RedemptionCalculationBotTrigger | -----------> | RedemptionFinalizer   |------------>
-               +--------------------+  (CSD)    +---------------------------------+    (CSD)     +-----------------------+    (Issuer)
-}

-- The finalization of the auction settlement creates a set of `RedemptionPayoutInfo` contracts
-- corresponding to each DvP. These contracts contain the relevant party and account information
-- required for a redemption when it is due
template RedemptionPayoutInfo
  with
    issuer: Party
    investor: Party
    bondInstrumentId: Id
    bondAccountProvider: Party
    investorCashAccount: Account
    settlementResult: DvpSettlement_Process_Result
    investorCashAssetSettlementCid: Id
    regulators: [Party]
  where
    signatory investor
    observer bondAccountProvider :: regulators

    controller issuer can
      RedemptionPayoutInfo_Redeem: ContractId AssetDeposit
        with
          cashAssetDepositCid: ContractId AssetDeposit
          issuerCashAssetSettlementCid: ContractId AssetSettlementRule
          bondArchivalRequestCid: ContractId BondArchivalRequest
          fixedRateBondFactCid: ContractId FixedRateBondFact
        do
          fixedRateBondFact <- fetch fixedRateBondFactCid

          -- quantity check
          bondDeposit <- fetch $ head $ head settlementResult.deliveryDepositCids
          let quantity = fixedRateBondFact.denomination * (1.0 + fixedRateBondFact.rate) * bondDeposit.asset.quantity
          cashAssetFact <- fetch cashAssetDepositCid
          assertMsg ("Cash asset quantity should be " <> (show quantity)) $ quantity == cashAssetFact.asset.quantity

          -- archive the bond asset
          exercise bondArchivalRequestCid BondArchivalRequest_Archive

          -- transfer
          exercise issuerCashAssetSettlementCid $ AssetSettlement_Transfer investorCashAssetSettlementCid cashAssetDepositCid 

-- The issuer can initiate a redemption at the bond account provider using this contract.
-- The `RedemptionRequest_Accept` choice creates a trigger contract which is picked
-- up by the redemption calculation bot.
template RedemptionRequest
  with
    issuer: Party
    provider: Party
    fixedRateBondFactCid: ContractId FixedRateBondFact
    isin: Text
    regulators: [Party]
  where
    signatory issuer
    observer regulators

    controller provider can
      RedemptionRequest_Accept: ContractId RedemptionCalculationBotTrigger
        do
          bond <- fetch fixedRateBondFactCid
          create RedemptionCalculationBotTrigger with
              issuer = issuer
              provider = provider
              fixedRateBondFactCid = fixedRateBondFactCid
              bondAssetId = bond.instrumentId
              cashAssetId = bond.cashAssetId
              regulators = regulators

-- Triggers the redemption calculation bot. The bot collects the relevant bond assets
-- and `RedemptionPayoutInfo`s and calculates the final coupon and creates cash
-- transfers to each of the investors.
-- It also archives the bonds that weren't sold at all.
template RedemptionCalculationBotTrigger
  with
    issuer: Party
    provider: Party
    fixedRateBondFactCid: ContractId FixedRateBondFact
    bondAssetId: Id
    cashAssetId: Id
    regulators: [Party]
  where
    signatory issuer, provider
    observer regulators

    controller provider can
      RedemptionCalculationBotTrigger_Start: Optional (ContractId RedemptionFinalizeBotTrigger)
        with
          redemptionPayoutInfos: [ContractId RedemptionPayoutInfo]
          bondsAtIssuer: [ContractId AssetDeposit]
        do
          fixedRateBond <- fetch fixedRateBondFactCid
          let redeemedBondInstrumentId = fixedRateBond.instrumentId

          -- archive the bonds left at issuer
          forA_ bondsAtIssuer \depositCid -> do
            deposit <- fetch depositCid
            assertMsg "BondsAtIssuer: all bonds should be owned by the issuer." $
              deposit.account.owner == issuer
            assertMsg ("BondsAtIssuer: IDs should be " <> show redeemedBondInstrumentId) $
              deposit.asset.id == redeemedBondInstrumentId
            archive depositCid

          -- proceed with redemption of the sold bonds
          zippedInstructionsWithNoops
            <- forA redemptionPayoutInfos \redemptionPayoutInfoCid -> do
              payoutInfo <- fetch redemptionPayoutInfoCid
              case getDeliveredAssetDeposit payoutInfo of
                Some bondAssetDepositCid -> do
                  asset <- fetch bondAssetDepositCid

                  assertMsg (ownerErrorText asset.account.owner payoutInfo.investor) $
                    asset.account.owner == payoutInfo.investor
                  assertMsg (assetIdErrorText asset.asset.id redeemedBondInstrumentId) $
                    asset.asset.id == redeemedBondInstrumentId
                  assertMsg (instrumentIdErrorText payoutInfo.bondInstrumentId redeemedBondInstrumentId) $
                    payoutInfo.bondInstrumentId == redeemedBondInstrumentId

                  arcReq <- create BondArchivalRequest with
                    provider = provider
                    issuer = issuer
                    owner = payoutInfo.investor
                    bondAssetDepositCid = bondAssetDepositCid
                    regulators = regulators
                  let payment = fixedRateBond.denomination * (1.0 + fixedRateBond.rate) * asset.asset.quantity
                      instruction = RedemptionInstruction with
                          issuer = issuer
                          provider = provider
                          investor = payoutInfo.investor
                          payment = payment
                          bondAssetId = fixedRateBond.instrumentId
                          currency = fixedRateBond.cashAssetId.label
                          bondAssetDepositCid = bondAssetDepositCid
                          redemptionPayoutInfoCid = redemptionPayoutInfoCid
                          fixedRateBondFactCid = fixedRateBondFactCid
                          bondArchivalRequestCid = arcReq
                  pure $ Some (instruction, payoutInfo.investorCashAccount.provider)
                None ->
                  pure None
          case unzip $ catOptionals zippedInstructionsWithNoops of
            ([], []) ->
              pure None
            (instructions, cashProviders) ->
              Some <$> create RedemptionFinalizeBotTrigger with
                issuer = issuer
                bondAccountProvider = provider
                cashAccountProviders = cashProviders
                instructions = instructions
                cashAssetId = fixedRateBond.cashAssetId
                regulators = regulators

getDeliveredAssetDeposit : RedemptionPayoutInfo -> Optional (ContractId AssetDeposit)
getDeliveredAssetDeposit payoutInfo = do
  firstDeliveryObligation <-
    TotalList.head payoutInfo.settlementResult.deliveryDepositCids
  TotalList.head firstDeliveryObligation

ownerErrorText : Party -> Party -> Text
ownerErrorText owner investor =
  "Bond owner [" <> show owner <> "] and account owner [" <> show investor <> "] should be the same"

assetIdErrorText : Id -> Id -> Text
assetIdErrorText identifier redeemedBondInstrumentId =
  "Asset fact instrumentId [" <> show identifier <> "] should match " <> show redeemedBondInstrumentId

instrumentIdErrorText : Id -> Id -> Text
instrumentIdErrorText bondInstrumentId redeemedBondInstrumentId =
  "RedemptionPayoutInfo instrumentId [" <> show bondInstrumentId <> "] should match " <> show redeemedBondInstrumentId

data RedemptionInstruction = RedemptionInstruction
  with
    issuer: Party
    provider: Party
    investor: Party
    payment: Decimal
    bondAssetId: Id
    currency: Text
    bondAssetDepositCid: ContractId AssetDeposit
    redemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
    fixedRateBondFactCid: ContractId FixedRateBondFact
    bondArchivalRequestCid: ContractId BondArchivalRequest
  deriving (Eq, Show)

processInstructions: [RedemptionInstruction] ->
                     [ContractId AssetDeposit] ->
                     ContractId AssetDeposit ->
                     ContractId AssetSettlementRule ->
                     [ContractId AssetDeposit] ->
                     Update [ContractId AssetDeposit]
processInstructions instructions cashAssetDepositCids cashAssetFungibleCid cashAssetSettlementCid payments
  | null instructions =
      pure payments
  | otherwise = do
      let instruction :: otherInstructions = instructions
      let firstCid = head cashAssetDepositCids
      firstCashDeposit <- fetch firstCid
      mergeResult <- mergeForQuantity firstCid firstCashDeposit (tail cashAssetDepositCids) instruction.payment cashAssetFungibleCid
      assertMsg "Cash assets should suffice when paying out on redemption" $ isSome mergeResult
      let (merged, remainingAssets)  = fromSome $ mergeResult
      payoutInfo <- fetch instruction.redemptionPayoutInfoCid
      payment <- exercise instruction.redemptionPayoutInfoCid RedemptionPayoutInfo_Redeem with
        cashAssetDepositCid = merged
        issuerCashAssetSettlementCid = cashAssetSettlementCid
        bondArchivalRequestCid = instruction.bondArchivalRequestCid
        fixedRateBondFactCid = instruction.fixedRateBondFactCid
      processInstructions otherInstructions remainingAssets cashAssetFungibleCid cashAssetSettlementCid (payment :: payments)

-- Triggers the redemption finalize bot which accepts the redemption payment
-- on behalf of the investor.
template RedemptionFinalizeBotTrigger
  with
    issuer: Party
    bondAccountProvider: Party
    instructions: [RedemptionInstruction]
    cashAccountProviders: [Party]
    cashAssetId: Id
    regulators: [Party]
  where
    signatory issuer, bondAccountProvider
    observer regulators

    controller issuer can
      RedemptionFinalizeBotTrigger_Finalize: [ContractId AssetDeposit]
        with
          cashAssetDepositCids: [ContractId AssetDeposit] -- the cash assets this choice can merge and split the required payment from
          cashAssetSettlementCid: ContractId AssetSettlementRule
          cashAssetFungibleCid: ContractId AssetDeposit
        do
          assertMsg "Cash asset parameter should not be empty" $ (length cashAssetDepositCids) > 0
          processInstructions instructions cashAssetDepositCids cashAssetFungibleCid cashAssetSettlementCid []

-- Helper contract to archive the bond assets (which needs signature of both
-- the investor and the provider (CSD))
template BondArchivalRequest
  with
    provider: Party
    owner: Party
    issuer: Party
    bondAssetDepositCid: ContractId AssetDeposit
    regulators: [Party]
  where
    signatory provider
    observer regulators

    controller owner can
      BondArchivalRequest_Archive: ()
        do archive bondAssetDepositCid
