--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Roles.CentralBankRole where

import DA.Set

import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset

import DA.Finance.OldTypes
import DA.Finance.Account.Fact
import DA.Finance.Asset.Fact
import DA.Finance.Asset.Lock
import DA.Finance.Asset.SplitAndMerge
import DA.Finance.Asset.Transfer.Immediate as Immediate
import DA.Finance.Asset.Transfer.Bilateral as Bilateral
import DA.Finance.Instruments.Cash

-- Role contract invitation for Central Bank (cash issuer) role.
template CentralBankRoleInvitation
  with
    centralBank: Party
    operator: Party
    regulators: [Party]
  where
    signatory operator
    observer regulators

    controller centralBank can
      CentralBankRoleInvitation_Accept: ContractId CentralBankRole
        do create CentralBankRole with
            centralBank = centralBank
            operator = operator
            regulators = regulators

      CentralBankRoleInvitation_Reject: ()
        do return ()

    controller operator can
      CentralBankRoleInvitation_Revoke: ()
        do return ()

-- Role contract for the Central Bank role. This role is entitled to create
-- cash accounts and issue cash.
template CentralBankRole
  with
    centralBank: Party
    operator: Party
    regulators: [Party]
  where
    signatory operator, centralBank
    observer regulators

    controller centralBank can
      nonconsuming CentralBankRole_IssueCash: ContractId AssetDeposit
        with
          owner: Party
          account: Account
          currency: Text
          quantity: Decimal
        do
          create AssetDeposit with
            asset = Asset with
              id = Id with
                signatories = fromList [centralBank]
                label = currency
                version = 0
              quantity = quantity
            observers = empty, ..

      nonconsuming CentralBankRole_CreateSettlementRule: ContractId AssetSettlement
        with
          owner: Party
          account: Account
        do
          create AssetSettlement with
            account = account
            observers = empty

      nonconsuming CentralBankRole_CreateFungibleRule: ContractId AssetFungible
        with
          owner: Party
          account: Account
        do
          create AssetFungible with
            account = account
            observers = empty

      nonconsuming CentralBankRole_CreateLockRule: ContractId AssetLockRule
        with
          owner: Party
        do
          create AssetLockRule with
            provider = centralBank
            owner = owner
            observers = []

-- Request contract to establish a cash accpimt associated with an initial
-- balance (given as `assetFactCid`)
template CashAccountRequest
  with
    centralBank: Party
    owner: Party
    accountRequestCid: ContractId AccountRequest
    assetFactCid: ContractId AssetFact
    transferRuleCid: ContractId Immediate.AssetTransferRule
    regulators: [Party]
  where
    signatory centralBank
    observer regulators

    controller owner can
      CashAccountRequest_Accept: (ContractId AccountFact, ContractId AssetFact)
        do
          account <- exercise accountRequestCid AccountRequest_Accept
          asset <- exercise transferRuleCid Transfer with assetFactCid = assetFactCid; accountCid = account
          return (account, asset)
