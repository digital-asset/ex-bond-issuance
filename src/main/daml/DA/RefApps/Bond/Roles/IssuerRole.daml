--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Roles.IssuerRole where

import DA.Next.Set

import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset

import DA.RefApps.Bond.FixedRateBond
import DA.RefApps.Bond.Auction
import DA.RefApps.Bond.Util
import DA.RefApps.Bond.Redemption

-- Role contract invitation for bond Issuer role.
template IssuerRoleInvitation
  with
    issuer: Party
    bondProvider: Party
    cashProvider: Party
    auctionAgent: Party
    operator: Party
    regulators: [Party]
  where
    signatory operator
    observer regulators

    controller issuer can
      IssuerRoleInvitation_Accept: ContractId IssuerRole
        do create IssuerRole with
            issuer = issuer
            bondProvider = bondProvider
            cashProvider = cashProvider
            auctionAgent = auctionAgent
            operator = operator
            regulators = regulators

      IssuerRoleInvitation_Reject: ()
        do return ()

    controller operator can
      IssuerRoleInvitation_Revoke: ()
        do return ()

-- Role contract for the bond Issuer role. This role is entitled to initiate
-- bond issuance, auction and redemption.
template IssuerRole
  with
    issuer: Party
    bondProvider: Party
    cashProvider: Party
    auctionAgent: Party
    operator: Party
    regulators: [Party]
  where
    signatory operator, issuer
    observer regulators
    controller issuer can
      nonconsuming IssuerRole_Issuance: ContractId IssuanceRequest
        with
          issueSize: Int
          issueDate: Date
          currency: Text
          denomination: Decimal
          maturityDate: Date
          couponRate: Decimal
          couponDates: [Date]
        do
          assertMsg "Denomination should be positive" $ denomination > 0.0
          assertMsg "Coupon rate should be positive" $ couponRate > 0.0
          -- coupon dates should happen earlier than maturity, since maturity is added to couponDates implicitly
          forA couponDates $ \date -> assertMsg
            ("Coupon dates should be between the issue date and maturity. Issue date: " <> show issueDate <> " Maturity: " <> show maturityDate <> " current date: " <> show date) $
            date >= issueDate && date < maturityDate
          let cashAssetId = Id with
                signatories = singleton cashProvider
                label = currency
                version = 0
              bondAccount = Account with
                id = Id (singleton bondProvider) "IssuerBondAccount" 0
                provider = bondProvider
                owner = issuer
          create IssuanceRequest with ..

      nonconsuming IssuerRole_CommissionAuction: ContractId CommissionBotTrigger
        with
          bondAssetDepositCid: ContractId AssetDeposit
          startDate: Date
          endDate: Date
          minPrice: Decimal
          size: Int
        do
          assertMsg "Minimum price should be positive" $ minPrice > 0.0
          assertMsg "Size price should be positive" $ size > 0
          asset <- fetch bondAssetDepositCid
          assertMsg ("Asset quantity [" <> show asset.asset.quantity <> "] should be greater than or equal to issue size [" <> show size <> "]") $
            asset.asset.quantity >= intToDecimal size

          create CommissionBotTrigger with
            issuer = issuer
            operator = operator
            regulators = regulators
            bondAssetDepositCid = bondAssetDepositCid
            issuerBondAccount = asset.account
            bondAssetId = asset.asset.id
            auctionAgent = auctionAgent
            startDate = startDate
            endDate = endDate
            minPrice = minPrice
            size = size
            cashAccountProvider = cashProvider

      nonconsuming IssuerRole_Redeem: ContractId RedemptionRequest
        with
          fixedRateBondFactCid: ContractId FixedRateBondFact
        do
          fact <- fetch fixedRateBondFactCid
          create RedemptionRequest with
            provider = fact.provider
            issuer = issuer
            fixedRateBondFactCid = fixedRateBondFactCid
            isin = fact.isin
            regulators = regulators

-- Triggers the commission bot, which is responsible to provide the FixedRateBond
-- and rule contracts required for the allocation and settlement after the successful
-- auction.
template CommissionBotTrigger
  with
    issuer: Party
    operator: Party
    regulators: [Party]
    bondAssetDepositCid: ContractId AssetDeposit
    issuerBondAccount: Account
    bondAssetId: Id
    auctionAgent: Party
    startDate: Date
    endDate: Date
    minPrice: Decimal
    size: Int
    cashAccountProvider: Party
  where
    signatory issuer, operator
    observer regulators

    controller issuer can
      CommissionBotTrigger_InviteAgent: (ContractId AuctionInvitation,  [ContractId AssetDeposit])
        with
          bondAssetFungibleCid: ContractId AssetFungible
          bondAssetSettlementCid: ContractId AssetSettlement
          cashAssetSettlementCid: ContractId AssetSettlement
          fixedRateBondFactCid: ContractId FixedRateBondFact
        do
          bondAssetDeposit <- fetch bondAssetDepositCid
          let decimalSize = intToDecimal size
              rest = bondAssetDeposit.asset.quantity - decimalSize
          -- Splitting the asset if needed
          splitFactPair <- if (bondAssetDeposit.asset.quantity > intToDecimal size) then do
                 first :: remaining <- exercise bondAssetFungibleCid $ AssetFungible_Split bondAssetDepositCid [decimalSize, rest]
                 return (first, remaining)
                else return (bondAssetDepositCid, [])
          let splitFactCid = fst splitFactPair
          observedBondAssetDepositCid <- exercise splitFactCid $ AssetDeposit_SetObservers (insert auctionAgent bondAssetDeposit.observers)
          observedBondAssetDeposit <- fetch observedBondAssetDepositCid
          fixedRateBondFact <- fetch fixedRateBondFactCid
          let auction = Auction with
                auctionAgent = auctionAgent
                issuer = issuer
                operator = operator
                regulators = regulators
                startDate = startDate
                endDate = endDate
                minPrice = minPrice
                size = size
                fixedRateBondFact = fixedRateBondFact
                cashAssetId = fixedRateBondFact.cashAssetId
                issuerCashAccountProvider = cashAccountProvider
                bondBundleData = BondBundleData observedBondAssetDepositCid bondAssetFungibleCid bondAssetSettlementCid cashAssetSettlementCid observedBondAssetDeposit.asset.id.label
                invitedBidders = []
                auctionName = ""


          invitation <- create AuctionInvitation with auction
          return (invitation, snd splitFactPair)

-- Using this template the issuer can request approval of the CSD for a bond
-- issuance initiated by the `IssuerRole_Issuance` choice.
template IssuanceRequest
  with
    issuer: Party
    operator: Party
    regulators: [Party]
    issueSize: Int
    issueDate: Date
    maturityDate: Date
    cashAssetId: Id
    denomination: Decimal
    couponRate: Decimal
    couponDates: [Date]
    bondAccount: Account
  where
    signatory operator, issuer
    observer regulators

    controller bondAccount.provider can
      IssuanceRequest_Accept: (ContractId FixedRateBondFact, ContractId AssetDeposit)
        with
          isin: Text
        do
          let bondId = Id with
                signatories = fromList [bondAccount.provider]
                label = isin
                version = 0
              id = Id with
                signatories = bondAccount.id.signatories
                label = isin
                version = 0
              asset = Asset with
                id = id
                quantity = intToDecimal issueSize
              assetFact = AssetDeposit with
                account = bondAccount
                observers = fromList regulators, ..
          fixedRateBondFactCid <- create FixedRateBondFact with
            provider = bondAccount.provider
            instrumentId = bondId
            isin = isin
            cashAssetId = cashAssetId
            rate = couponRate
            paymentLag = 0
            denomination = denomination
            couponDates = couponDates
            couponDatesTriggered = []
            issueDate = issueDate
            maturityDate = maturityDate
            observers = issuer :: regulators
          assetCid <- create assetFact
          return (fixedRateBondFactCid, assetCid)
