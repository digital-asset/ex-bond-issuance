--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--


module DA.RefApps.Bond.Triggers.RedemptionCalculationTrigger where

import DA.RefApps.Bond.Test.FullScenario qualified as MarketSetup
import DA.RefApps.Bond.Redemption
import DA.Finance.Fact.Asset
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.ContractUtils
import Daml.Script (Script, script)
import qualified Daml.Script as Script
import Daml.Trigger
import Daml.Trigger.Assert
import DA.Assert
import DA.List
import DA.Next.Map qualified as Map
import DA.Foldable hiding (length)
import DA.Finance.Rule.Asset (AssetSettlementChain)


redemptionCalculationTrigger : Trigger ()
redemptionCalculationTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = redemptionCalculationRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @RedemptionCalculationBotTrigger,
      registeredTemplate @RedemptionPayoutInfo,
      registeredTemplate @AssetDeposit
    ]
  , heartbeat = None
  }

redemptionCalculationRule : Party -> ACS -> Time -> Map.Map CommandId [Command] -> () -> TriggerA ()
redemptionCalculationRule party activeContracts _ _ () = do
  let redemptionCalcTriggers = getContracts @RedemptionCalculationBotTrigger activeContracts
      payoutInfos = getContracts @RedemptionPayoutInfo activeContracts
      assetDeposits = getContracts @AssetDeposit activeContracts

  forA_ redemptionCalcTriggers $ \(triggerCid, trigger) -> do
    let remainingAssetCids =
          filterContractIds (\p -> p.account.owner == trigger.issuer &&
                                   p.asset.id == trigger.bondAssetId)
            assetDeposits
        relevantPayoutInfos =
          filterContractIds (\p -> p.bondInstrumentId == trigger.bondAssetId)
            payoutInfos
    dedupExercise triggerCid $ RedemptionCalculationBotTrigger_Start
        relevantPayoutInfos
        remainingAssetCids

-- Tests ---------------------------

testWithSomeRemainedBond: Script ()
testWithSomeRemainedBond = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties

  issuance <-
    MarketSetup.setupIssuance parties
  progress <-
    MarketSetup.startAuction parties issuance
  (settleRequests, remainedBond) <-
    MarketSetup.finalizeAuction parties progress
  assetsForRedemption <-
    MarketSetup.doSettlement parties issuance settleRequests progress
  (request, leftOverSettlementChain) <-
    redeem issuer issuance settleRequests
  calcTrigger <-
    submit csd $ Script.exerciseCmd request RedemptionRequest_Accept

  let activeContracts =
          toACS calcTrigger <>
          toACS remainedBond
  commands <-
    testRule redemptionCalculationTrigger csd activeContracts Map.empty ()
  let flattenedCommands = flattenCommands commands
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid calcTrigger
    assertEq choiceArg (RedemptionCalculationBotTrigger_Start with
            redemptionPayoutInfos = []
            bondsAtIssuer = [remainedBond])

testWithNoRemainedBond: Script ()
testWithNoRemainedBond = script do
  parties@MarketSetup.Parties{..} <- MarketSetup.allocateParties

  issuance <-
    MarketSetup.setupIssuance parties
  progress <-
    MarketSetup.startAuction parties issuance
  (settleRequests, _unusedRemainedBond) <-
    MarketSetup.finalizeAuction parties progress
  assetsForRedemption <-
    MarketSetup.doSettlement parties issuance settleRequests progress
  (request, leftOverSettlementChain) <-
    redeem issuer issuance settleRequests
  calcTrigger <-
    submit csd $ Script.exerciseCmd request RedemptionRequest_Accept

  let activeContracts = toACS calcTrigger
  commands <-
    testRule redemptionCalculationTrigger csd activeContracts Map.empty ()
  let flattenedCommands = flattenCommands commands
  length flattenedCommands === 1
  assertExerciseCmd flattenedCommands $ \(cid, choiceArg) -> do
    assertEq cid calcTrigger
    assertEq choiceArg (RedemptionCalculationBotTrigger_Start with
            redemptionPayoutInfos = []
            bondsAtIssuer = [])

redeem: Party -> MarketSetup.TestIssuance -> MarketSetup.SettleRequests ->Â Script (ContractId RedemptionRequest, ContractId AssetSettlementChain)
redeem issuer issuance settleRequests = do
  redeemRequest <- submit issuer do
    Script.exerciseCmd issuance.roles.issuerRoleCid $ IssuerRole_Redeem issuance.fixedRateBondFactCid
  Some otherParticipantReq <- Script.queryContractId issuer settleRequests.otherSettleReqCid
  Some otherSettleReq <- Script.queryContractId issuer $ head otherParticipantReq.settleRequestCids
  return (redeemRequest, otherSettleReq.bondSettlementChainCid)
