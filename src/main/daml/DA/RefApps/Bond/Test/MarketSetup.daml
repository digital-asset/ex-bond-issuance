--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Test.MarketSetup where

import DA.Date

import DA.RefApps.Bond.Roles.CentralBankRole
import DA.RefApps.Bond.Roles.CsdRole
import DA.RefApps.Bond.Roles.OperatorRole
import DA.RefApps.Bond.Roles.BankRole
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.Roles.AuctionAgentRole
import DA.RefApps.Bond.Test.FullScenario

-- Initial setup of the market participants and some cash
testMarketSetup = scenario do
  operator <- getParty "Operator"
  regulator <- getParty "Regulator"
  auctionAgent <- getParty "AuctionAgent"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  csd <- getParty "CSD"
  issuer <- getParty "Issuer"
  centralBank <- getParty "CentralBank"

  (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, csdInvitationCid, issuerCid, centralBankCid)
    <- submit operator do
      operatorCid <- create OperatorRole with
          operator = operator
          regulators = [regulator]
      auctionAgentInvitationCid
        <- exercise operatorCid OperatorRole_InviteAuctionAgent with
              auctionAgent = auctionAgent
      bankInvitationCid1
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank1
      bankInvitationCid2
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank2
      bankInvitationCid3
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank3
      csdInvitationCid
        <- exercise operatorCid OperatorRole_InviteCsd with
              csd = csd
      issuerCid
        <- exercise operatorCid OperatorRole_InviteIssuer with
              issuer = issuer
              bondProvider = csd
              cashProvider = centralBank
              auctionAgent = auctionAgent
      centralBankCid
        <- exercise operatorCid OperatorRole_InviteCentralBank with
              centralBank = centralBank
      return (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, csdInvitationCid, issuerCid, centralBankCid)

  submit auctionAgent do
    exercise auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

  submit bank1 do
    exercise bankInvitationCid1 BankRoleInvitation_Accept

  submit bank2 do
    exercise bankInvitationCid2 BankRoleInvitation_Accept

  submit bank3 do
    exercise bankInvitationCid3 BankRoleInvitation_Accept

  csdRoleCid <- submit csd do
    exercise csdInvitationCid CsdRoleInvitation_Accept

  submit issuer do
    exercise issuerCid IssuerRoleInvitation_Accept

  centralBankRoleCid <- submit centralBank do
    exercise centralBankCid CentralBankRoleInvitation_Accept

  let issuerCashAccount = createAccount issuer centralBank "IssuerCashAccount"
      bank1CashAccount = createAccount bank1 centralBank "Bank1CashAccount"
      bank2CashAccount = createAccount bank2 centralBank "Bank2CashAccount"
      bank3CashAccount = createAccount bank3 centralBank "Bank3CashAccount"
      issuerBondAccount = createAccount issuer csd "IssuerBondAccount"
      bank1BondAccount = createAccount bank1 csd "Bank1BondAccount"
      bank2BondAccount = createAccount bank2 csd "Bank2BondAccount"
      bank3BondAccount = createAccount bank3 csd "Bank3BondAccount"

  submit centralBank do
    exercise centralBankRoleCid $ CentralBankRole_IssueCash bank1CashAccount "USD" 50000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash bank2CashAccount "USD" 600000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash bank3CashAccount "USD" 50000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash issuerCashAccount "USD" 100000000.0

    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank1CashAccount []
    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank2CashAccount []
    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank3CashAccount []
    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule issuerCashAccount []

    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank1CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank2CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank3CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule issuerCashAccount

    exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank1CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank2CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank3CashAccount

  submit csd do
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank1BondAccount []
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank2BondAccount []
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank3BondAccount []
    exercise csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]

    exercise csdRoleCid $ CsdRole_CreateSettlementRule bank1BondAccount []
    exercise csdRoleCid $ CsdRole_CreateSettlementRule bank2BondAccount []
    exercise csdRoleCid $ CsdRole_CreateSettlementRule bank3BondAccount []
    exercise csdRoleCid $ CsdRole_CreateSettlementRule issuerBondAccount [auctionAgent, bank1, bank2, bank3]

  -- setup time
  now <- getTime
  passToDate $ date 2019 Apr 1
