--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Test.MarketSetup where

import DA.Date

import DA.RefApps.Bond.Roles.CentralBankRole
import DA.RefApps.Bond.Roles.CsdRole
import DA.RefApps.Bond.Roles.OperatorRole
import DA.RefApps.Bond.Roles.BankRole
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.Roles.AuctionAgentRole
import DA.RefApps.Bond.Test.FullScenario
import DA.RefApps.Bond.Auction
import DA.RefApps.Bond.Settlement

-- Initial setup of the market participants and some cash
testMarketSetup = scenario do
  operator <- getParty "Operator"
  regulator <- getParty "Regulator"
  auctionAgent <- getParty "AuctionAgent"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  csd <- getParty "CSD"
  issuer <- getParty "Issuer"
  centralBank <- getParty "CentralBank"

  (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, csdInvitationCid, issuerCid, centralBankCid)
    <- submit operator do
      operatorCid <- create OperatorRole with
          operator = operator
          regulators = [regulator]
      auctionAgentInvitationCid
        <- exercise operatorCid OperatorRole_InviteAuctionAgent with
              auctionAgent = auctionAgent
      bankInvitationCid1
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank1
      bankInvitationCid2
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank2
      bankInvitationCid3
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank3
      csdInvitationCid
        <- exercise operatorCid OperatorRole_InviteCsd with
              csd = csd
      issuerCid
        <- exercise operatorCid OperatorRole_InviteIssuer with
              issuer = issuer
              bondProvider = csd
              cashProvider = centralBank
              auctionAgent = auctionAgent
      centralBankCid
        <- exercise operatorCid OperatorRole_InviteCentralBank with
              centralBank = centralBank
      return (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, csdInvitationCid, issuerCid, centralBankCid)

  submit auctionAgent do
    exercise auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

  submit bank1 do
    exercise bankInvitationCid1 BankRoleInvitation_Accept

  submit bank2 do
    exercise bankInvitationCid2 BankRoleInvitation_Accept

  submit bank3 do
    exercise bankInvitationCid3 BankRoleInvitation_Accept

  csdRoleCid <- submit csd do
    exercise csdInvitationCid CsdRoleInvitation_Accept

  issuerRole <- submit issuer do
    exercise issuerCid IssuerRoleInvitation_Accept

  centralBankRoleCid <- submit centralBank do
    exercise centralBankCid CentralBankRoleInvitation_Accept

  let issuerCashAccount = createAccount issuer centralBank "IssuerCashAccount"
      bank1CashAccount = createAccount bank1 centralBank "Bank1CashAccount"
      bank2CashAccount = createAccount bank2 centralBank "Bank2CashAccount"
      bank3CashAccount = createAccount bank3 centralBank "Bank3CashAccount"
      issuerBondAccount = createAccount issuer csd "IssuerBondAccount"
      bank1BondAccount = createAccount bank1 csd "Bank1BondAccount"
      bank2BondAccount = createAccount bank2 csd "Bank2BondAccount"
      bank3BondAccount = createAccount bank3 csd "Bank3BondAccount"

  (cashBank1, settIssCash, funBank1Cash, lockBank1, settBank1Cash) <- submit centralBank do
    cashBank1 <- exercise centralBankRoleCid $ CentralBankRole_IssueCash bank1CashAccount "USD" 50000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash bank2CashAccount "USD" 600000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash bank3CashAccount "USD" 50000000.0
    exercise centralBankRoleCid $ CentralBankRole_IssueCash issuerCashAccount "USD" 100000000.0

    settBank1Cash <- exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank1CashAccount []
    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank2CashAccount []
    exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank3CashAccount []
    settIssCash <- exercise centralBankRoleCid $ CentralBankRole_CreateSettlementRule issuerCashAccount [bank1, bank2, bank3]

    funBank1Cash <- exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank1CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank2CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank3CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateFungibleRule issuerCashAccount

    lockBank1 <- exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank1CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank2CashAccount
    exercise centralBankRoleCid $ CentralBankRole_CreateLockRule bank3CashAccount

    return (cashBank1, settIssCash, funBank1Cash, lockBank1, settBank1Cash)

  (funIss, settBank1, settIss) <- submit csd do
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank1BondAccount []
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank2BondAccount []
    exercise csdRoleCid $ CsdRole_CreateFungibleRule bank3BondAccount []
    funIss <- exercise csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]

    settBank1 <- exercise csdRoleCid $ CsdRole_CreateSettlementRule bank1BondAccount []
    exercise csdRoleCid $ CsdRole_CreateSettlementRule bank2BondAccount []
    exercise csdRoleCid $ CsdRole_CreateSettlementRule bank3BondAccount []
    settIss <- exercise csdRoleCid $ CsdRole_CreateSettlementRule issuerBondAccount [auctionAgent, bank1, bank2, bank3]
    return (funIss, settBank1, settIss)

  -- setup time
  now <- getTime
  passToDate $ date 2019 Apr 1
  return (issuer, issuerRole, csd, auctionAgent, bank1, funIss, settIss, settIssCash,
          cashBank1, funBank1Cash, settBank1, settBank1Cash, lockBank1)


testMarketSetupFull = scenario $ do
  (issuer, issuerRole, csd, auctionAgent, bank1,
   funIss, settIss, settIssCash, cashBank1,
   funBank1Cash, settBank1, settBank1Cash, lockBank1) <- testMarketSetup
  issuanceReq <- submit issuer do
    exercise issuerRole $ IssuerRole_Issuance with
                            issueSize = 100
                            issueDate = date 2019 Jul 1
                            currency = "USD"
                            denomination = 1.0
                            maturityDate = date 2019 Jul 31
                            couponRate = 0.01
                            couponDates = []

  (bondFact, bondAssetDeposit) <- submit csd do
    exercise issuanceReq $ IssuanceRequest_Accept "BOND007"

  commissionBotTrigger <- submit issuer do
    exercise issuerRole $ IssuerRole_CommissionAuction with
          bondAssetDepositCid = bondAssetDeposit
          startDate = date 2019 Jul 1
          endDate = date 2019 Jul 2
          minPrice = 1.0
          size = 100

  (auctionInv, _) <- submit issuer do
    exercise commissionBotTrigger $ CommissionBotTrigger_InviteAgent with
          bondAssetFungibleCid = funIss
          bondAssetSettlementCid = settIss
          cashAssetSettlementCid = settIssCash
          fixedRateBondFactCid = bondFact

  auction <- submit auctionAgent do
    exercise auctionInv $ AuctionInvitation_Accept "auction1"

  passToDate $ date 2019 Jul 1

  (auction', [bidderPar]) <- submit auctionAgent do
    exercise auction $ Auction_InviteBidders [bank1]

  pbbTrigger <- submit bank1 do
    exercise bidderPar $ BidderParticipation_PlaceBid with
      price = 1.0
      quantity = 100

  Right(lockedCash, auctionBid, _) <- submit bank1 do
    exercise pbbTrigger $ PlaceBidBotTrigger_LockCash with
          cashDepositCids = [cashBank1]
          cashAssetFungibleCid = funBank1Cash
          lockRuleCid = lockBank1
          investorBondAssetSettlementCid = settBank1

  passToDate $ date 2019 Jul 2
  afTrigger <- submit auctionAgent do
    exercise auction' Auction_Finalize

  ([settReq], _) <- submit auctionAgent do
    exercise afTrigger $ AuctionFinalizeBotTrigger_AllocateBond with
          participationCids = [bidderPar]
          bidCids = [auctionBid]

  isbTrigger <- submit bank1 do
    exercise settReq AuctionParticipantSettleRequest_Settle

  submit bank1 do
    exercise isbTrigger $ InvestorSettlementBotTrigger_Finalize with
          auctionLockedCashCids = [lockedCash]
          cashAssetFungible = funBank1Cash
          investorCashSettlementCid = settBank1Cash

  return ()
