--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Test.FullScenario where

import DA.Set
import DA.Date
import DA.Either
import DA.List
import DA.Time
import DA.Optional
import DA.Assert

import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset

import DA.RefApps.Bond.Lock
import DA.RefApps.Bond.FixedRateBond
import DA.RefApps.Bond.Roles.CentralBankRole
import DA.RefApps.Bond.Roles.CsdRole
import DA.RefApps.Bond.Roles.OperatorRole
import DA.RefApps.Bond.Roles.AuctionAgentRole
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.Roles.BankRole
import DA.RefApps.Bond.Auction
import DA.RefApps.Bond.Redemption
import DA.RefApps.Bond.Settlement
import DA.RefApps.Bond.Util

data TestRoles = TestRoles {
  issuerRoleCid: ContractId IssuerRole
, csdRoleCid: ContractId CsdRole
, centralBankRoleCid: ContractId CentralBankRole
}

data TestIssuance = TestIssuance {
  roles: TestRoles
, fixedRateBondFactCid: ContractId FixedRateBondFact
, bondBundleData: BondBundleData
, cashAccounts: Accounts
, bondAccounts: Accounts
, cashAssets: CashAssets
, rules: Rules
, cashAssetId: Id
}

data Accounts = Accounts {
  issuerAccount: Account
, bank1Account: Account
, bank2Account: Account
, bank3Account: Account
}

data CashAssets = CashAssets {
  issuerCashDepositCid: ContractId AssetDeposit
, bank1CashDepositCid: ContractId AssetDeposit
, bank2CashDepositCid: ContractId AssetDeposit
, bank3CashDepositCid: ContractId AssetDeposit
}

data AuctionProgress = AuctionProgress {
  auction: ContractId Auction
, bidderParticipationCid1 : ContractId BidderParticipation
, bidderParticipationCid2 : ContractId BidderParticipation
, bidderParticipationCid3 : ContractId BidderParticipation
, bidCid1_1 : ContractId AuctionBid
, bidCid2_1 : ContractId AuctionBid
, bidCid2_2 : ContractId AuctionBid
, bidCid3_1 : ContractId AuctionBid
, otherAuction: ContractId Auction
, otherBidderParticipationCid1: ContractId BidderParticipation
, otherBidderParticipationCid2: ContractId BidderParticipation
, otherBidderParticipationCid3: ContractId BidderParticipation
, otherBidCid1_1 : ContractId AuctionBid
, bank1Locks: [ContractId AuctionLockedCash]
, bank2Locks: [ContractId AuctionLockedCash]
, bank3Locks: [ContractId AuctionLockedCash]
, bank1OtherLocks: [ContractId AuctionLockedCash]
}

data SettleRequests = SettleRequests {
  bank1SettleReqCid: ContractId AuctionParticipantSettleRequest
, bank2SettleReqCid: ContractId AuctionParticipantSettleRequest
, bank3SettleReqCid: ContractId AuctionParticipantSettleRequest
, otherSettleReqCid: ContractId AuctionParticipantSettleRequest
}

data AssetsForRedemption = AssetsForRedemption {
  bank1BondDepositCid: ContractId AssetDeposit
, bank2BondDepositCid: ContractId AssetDeposit
, bank3BondDepositCid: ContractId AssetDeposit
, bank1RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
, bank2RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
, bank3RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
}

data Rules = Rules {
  issuerCashSettlementCid: ContractId AssetSettlement
, bank1BondSettlementCid: ContractId AssetSettlement
, bank2BondSettlementCid: ContractId AssetSettlement
, bank3BondSettlementCid: ContractId AssetSettlement
, bank1CashSettlementCid: ContractId AssetSettlement
, bank2CashSettlementCid: ContractId AssetSettlement
, bank3CashSettlementCid: ContractId AssetSettlement
, issuerCashFungibleCid: ContractId AssetFungible
, bank1CashFungibleCid: ContractId AssetFungible
, bank2CashFungibleCid: ContractId AssetFungible
, bank3CashFungibleCid: ContractId AssetFungible
, bank1LockRuleCid: ContractId AssetLockRule
, bank2LockRuleCid: ContractId AssetLockRule
, bank3LockRuleCid: ContractId AssetLockRule
}

bondIsin = "BOND-007"
auctionStartDate = date 2020 Jan 10
auctionEndDate = date 2020 Jan 20
maturity = date 2022 Jan 20

setupRoles: Scenario TestRoles = scenario do
  operator <- getParty "Operator"
  regulator <- getParty "Regulator"
  auctionAgent <- getParty "AuctionAgent"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  bank4 <- getParty "Bank4"
  csd <- getParty "CSD"
  issuer <- getParty "Issuer"
  centralBank <- getParty "CentralBank"

  (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, bankInvitationCid4, csdInvitationCid, issuerCid, centralBankCid)
    <- submit operator do
      operatorCid <- create OperatorRole with
          operator = operator
          regulators = [regulator]
      auctionAgentInvitationCid
        <- exercise operatorCid OperatorRole_InviteAuctionAgent with
              auctionAgent = auctionAgent
      bankInvitationCid1
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank1
      bankInvitationCid2
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank2
      bankInvitationCid3
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank3
      bankInvitationCid4
        <- exercise operatorCid OperatorRole_InviteBank with
              bank = bank4
      csdInvitationCid
        <- exercise operatorCid OperatorRole_InviteCsd with
              csd = csd
      issuerCid
        <- exercise operatorCid OperatorRole_InviteIssuer with
              issuer = issuer
              bondProvider = csd
              cashProvider = centralBank
              auctionAgent = auctionAgent
      centralBankCid
        <- exercise operatorCid OperatorRole_InviteCentralBank with
              centralBank = centralBank
      return (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, bankInvitationCid4, csdInvitationCid, issuerCid, centralBankCid)

  auctionAgentRole <- submit auctionAgent do
    exercise auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

  bankRole1Cid <- submit bank1 do
    exercise bankInvitationCid1 BankRoleInvitation_Accept

  bankRole2Cid <- submit bank2 do
    exercise bankInvitationCid2 BankRoleInvitation_Accept

  bankRole3Cid <- submit bank3 do
    exercise bankInvitationCid3 BankRoleInvitation_Accept

  bankRole4Cid <- submit bank4 do
    exercise bankInvitationCid4 BankRoleInvitation_Reject

  csdRole <- submit csd do
    exercise csdInvitationCid CsdRoleInvitation_Accept

  issuerRole <- submit issuer do
    exercise issuerCid IssuerRoleInvitation_Accept

  centralBankRoleCid <- submit centralBank do
    exercise centralBankCid CentralBankRoleInvitation_Accept
  return TestRoles {
    issuerRoleCid = issuerRole
  , csdRoleCid = csdRole
  , centralBankRoleCid = centralBankRoleCid
  }

createAccount
  (owner: Party)
  (provider: Party)
  (label: Text) = Account with
    id = Id with
      signatories = fromList [provider]
      label = label
      version = 0
    provider = provider
    owner = owner


setupIssuance: Scenario TestIssuance = scenario do
  testRoles <- setupRoles

  centralBank <- getParty "CentralBank"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  issuer <- getParty "Issuer"
  auctionAgent <- getParty "AuctionAgent"
  csd <- getParty "CSD"

  let issuerCashAccount = createAccount issuer centralBank "IssuerCashAccount"
      bank1CashAccount = createAccount bank1 centralBank "Bank1CashAccount"
      bank2CashAccount = createAccount bank2 centralBank "Bank2CashAccount"
      bank3CashAccount = createAccount bank3 centralBank "Bank3CashAccount"
      issuerBondAccount = createAccount issuer csd "IssuerBondAccount"
      bank1BondAccount = createAccount bank1 csd "Bank1BondAccount"
      bank2BondAccount = createAccount bank2 csd "Bank2BondAccount"
      bank3BondAccount = createAccount bank3 csd "Bank3BondAccount"

  -- Rules and cash
  (bank1CashSettlement, bank1Fungible, bank1Lock, bank1CashAsset) <- submit centralBank do
    bank1CashAsset <- exercise testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank1CashAccount "USD" 50000000.0
    bank1Settlement <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank1CashAccount []
    bank1Fungible <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank1CashAccount
    bank1Lock <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank1CashAccount
    return (bank1Settlement, bank1Fungible, bank1Lock, bank1CashAsset)
  (bank2CashSettlement, bank2Fungible, bank2Lock, bank2CashAsset) <- submit centralBank do
    bank2CashAsset <- exercise testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank2CashAccount "USD" 600000000.0
    bank2Settlement <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank2CashAccount []
    bank2Fungible <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank2CashAccount
    bank2Lock <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank2CashAccount
    return (bank2Settlement, bank2Fungible, bank2Lock, bank2CashAsset)
  (bank3CashSettlement, bank3Fungible, bank3Lock, bank3CashAsset) <- submit centralBank do
    bank3CashAsset <- exercise testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank3CashAccount "USD" 30000000.0
    bank3Settlement <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank3CashAccount []
    bank3Fungible <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank3CashAccount
    bank3Lock <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank3CashAccount
    return (bank3Settlement, bank3Fungible, bank3Lock, bank3CashAsset)

  (issuerCashAsset, issuerCashSettlement, issuerCashFungibleCid) <- submit centralBank do
    issuerCashAsset <- exercise testRoles.centralBankRoleCid $ CentralBankRole_IssueCash issuerCashAccount "USD" 100000000.0
    issuerCashSettlement <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule issuerCashAccount [auctionAgent, bank1, bank2, bank3]
    issuerCashFungibleCid <- exercise testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule issuerCashAccount
    return (issuerCashAsset, issuerCashSettlement, issuerCashFungibleCid)

  (issuerFungibleRule, issuerBondSettlement) <- submit csd do
    issuerFungibleRule <- exercise testRoles.csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]
    issuerSettlementRule <- exercise testRoles.csdRoleCid $ CsdRole_CreateSettlementRule issuerBondAccount [auctionAgent, bank1, bank2, bank3]
    return (issuerFungibleRule, issuerSettlementRule)

  (bank1BondSettlement, bank2BondSettlement, bank3BondSettlement) <- submit csd do
    bank1Settlement <- exercise testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank1BondAccount []
    bank2Settlement <- exercise testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank2BondAccount []
    bank3Settlement <- exercise testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank3BondAccount []
    return (bank1Settlement, bank2Settlement, bank3Settlement)

  -- Bond Issuance ------------------------

  accProviderApprovalReqCid <- submit issuer do
    now <- toDateUTC <$> getTime
    let (year, month, day) = toGregorian auctionEndDate
        cashAssetId = Id with
          signatories = fromList [centralBank]
          label = "USD"
          version = 0
    exercise testRoles.issuerRoleCid IssuerRole_Issuance with
      issueSize = 3000000
      issueDate = now
      currency = cashAssetId.label
      denomination = 40.1
      maturityDate = maturity
      couponRate = 0.1
      couponDates = [date (year + 1) month day] -- plus maturity

  (fixedRateBondFactCid, assetDepositCid) <- submit csd do
    exercise accProviderApprovalReqCid IssuanceRequest_Accept with isin = bondIsin

  let cashAccounts = Accounts issuerCashAccount bank1CashAccount bank2CashAccount bank3CashAccount
  let bondAccounts = Accounts issuerBondAccount bank1BondAccount bank2BondAccount bank3BondAccount
  let cashAssets = CashAssets issuerCashAsset bank1CashAsset bank2CashAsset bank3CashAsset
  let rules = Rules
        issuerCashSettlement
        bank1BondSettlement
        bank2BondSettlement
        bank3BondSettlement
        bank1CashSettlement
        bank2CashSettlement
        bank3CashSettlement
        issuerCashFungibleCid
        bank1Fungible
        bank2Fungible
        bank3Fungible
        bank1Lock
        bank2Lock
        bank3Lock

  let bondBundleData = BondBundleData with
                      assetDepositCid = assetDepositCid
                      assetFungibleCid = issuerFungibleRule
                      bondSettlementCid = issuerBondSettlement
                      cashSettlementCid = issuerCashSettlement
                      assetLabel = bondIsin, ..
      cashAssetId = Id (singleton centralBank) "USD" 0
  return TestIssuance {
    roles = testRoles
  , fixedRateBondFactCid = fixedRateBondFactCid
  , bondBundleData = bondBundleData
  , cashAccounts
  , bondAccounts
  , cashAssets
  , rules
  , cashAssetId
  }

{-
  Example scenario
  - minPrice = 40
  - auctionSize = 10000000

 | Bidder | Price | Quantity | Time |
 | Bank1  | 42    | 200000   | t1   |
 | Bank2  | 25    | 800000   | t2   |
 | Bank2  | 42    | 500000   | t3   |
 | Bank3  | 43    | 400000   | t4   |
 t1 < t2 < t3 < t4

 AuctionAgent orders the bids by price and time:
 | Bank3 | 43 | 400000           | t4 <- highest price
 | Bank1 | 42 | 200000           | t1 <- this happened before the other 42 bid
 | Bank2 | 42 | 500000 -> 400000 | t3 <- only 400000 items remained
 the last bid does not meet the the minimum price requirement

 The actual price is set by the lowest successful bid: 42

 Then the algorhitm will create Dvps:
 | Bidder  | Cash        |
 | Bank3   | 42 * 400000 |
 | Bank1   | 42 * 200000 |
 | Bank2   | 42 * 400000 |

There is a parallely going auction of the same
-}
startAuction = \(issuance: TestIssuance) -> scenario do
  auctionAgent <- getParty "AuctionAgent"
  issuer <- getParty "Issuer"
  centralBank <- getParty "CentralBank"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  csd <- getParty "CSD"

  passToDate $ auctionStartDate

  -- Auction ----------------------------
  (auctionInvitationCid, remainingAssets) <- submit issuer do
    commissionedCid <- exercise issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = issuance.bondBundleData.assetDepositCid
      startDate = auctionStartDate
      endDate = auctionEndDate
      minPrice = 40.0
      size = 1000000

    exercise commissionedCid CommissionBotTrigger_InviteAgent with
      bondAssetFungibleCid = issuance.bondBundleData.assetFungibleCid
      bondAssetSettlementCid = issuance.bondBundleData.bondSettlementCid
      cashAssetSettlementCid = issuance.bondBundleData.cashSettlementCid
      fixedRateBondFactCid = issuance.fixedRateBondFactCid

  (auction', [bidderParticipationCid1, bidderParticipationCid2, bidderParticipationCid3]) <- submit auctionAgent do
    auctionCid <- exercise auctionInvitationCid AuctionInvitation_Accept with
      auctionName = "testAuction"
    exercise auctionCid Auction_InviteBidders with
      bidders = [bank1, bank2, bank3]

  pass $ seconds 1

  -- An other parallel auction ----------------------------
  (otherAuctionInvitation, _) <- submit issuer do
    otherCommissionedCid <- exercise issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = head remainingAssets
      startDate = auctionStartDate
      endDate = auctionEndDate
      minPrice = 50.0
      size = 2000000

    exercise otherCommissionedCid CommissionBotTrigger_InviteAgent with
      bondAssetFungibleCid = issuance.bondBundleData.assetFungibleCid
      bondAssetSettlementCid = issuance.bondBundleData.bondSettlementCid
      cashAssetSettlementCid = issuance.bondBundleData.cashSettlementCid
      fixedRateBondFactCid = issuance.fixedRateBondFactCid

  (otherAuction', [otherBidderParticipationCid1, otherBidderParticipationCid2, otherBidderParticipationCid3]) <- submit auctionAgent do
    otherAuctionCid <- exercise otherAuctionInvitation AuctionInvitation_Accept with
      auctionName = "otherTestAuction"
    exercise otherAuctionCid Auction_InviteBidders with
      bidders = [bank1, bank2, bank3]

  pass $ seconds 1

  -- Bidding -------------------

  (bidCid1_1, bank1RemainingCash, bank1Lock1)
    <- submit bank1 do
      bidLockReq <- exercise bidderParticipationCid1 BidderParticipation_PlaceBid with
        price = 42.0
        quantity = 200000
      lockCashResult <- exercise bidLockReq PlaceBidBotTrigger_LockCash with
        cashDepositCids = [issuance.cashAssets.bank1CashDepositCid]
        cashAssetFungibleCid = issuance.rules.bank1CashFungibleCid
        lockRuleCid = issuance.rules.bank1LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank1BondSettlementCid

      let (bank1Lock1, bidCid1_1, rest) = fromSome $ eitherToOptional $ lockCashResult
      return (bidCid1_1, rest, bank1Lock1)

  pass $ seconds 1

  (bidCid2_1, bidCid2_2, bidCid2_3, bank2Lock1, bank2Lock2, bank2Lock3)
    <- submit bank2 do
      bidLockReq1 <- exercise bidderParticipationCid2 BidderParticipation_PlaceBid with
        price = 25.0
        quantity = 800000
      lockCashResult1 <- exercise bidLockReq1 PlaceBidBotTrigger_LockCash with
        cashDepositCids = [issuance.cashAssets.bank2CashDepositCid]
        cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
        lockRuleCid = issuance.rules.bank2LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid

      let (bank2Lock1, bidCid2_1, rest) = fromSome $ eitherToOptional $ lockCashResult1
      bidLockReq2 <- exercise bidderParticipationCid2 BidderParticipation_PlaceBid with
        price = 42.0
        quantity = 500000
      lockCashResult2 <- exercise bidLockReq2 PlaceBidBotTrigger_LockCash with
        cashDepositCids = rest
        cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
        lockRuleCid = issuance.rules.bank2LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid

      let (bank2Lock2, bidCid2_2, rest') = fromSome $ eitherToOptional $ lockCashResult2
      bidLockReq3 <- exercise bidderParticipationCid2 BidderParticipation_PlaceBid with
        price = 422.0 -- fat finger error
        quantity = 500000
      lockCashResult3 <- exercise bidLockReq3 PlaceBidBotTrigger_LockCash with
        cashDepositCids = rest'
        cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
        lockRuleCid = issuance.rules.bank2LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid

      let (bank2Lock3, bidCid2_3, _) = fromSome $ eitherToOptional $ lockCashResult3
      return (bidCid2_1, bidCid2_2, bidCid2_3, bank2Lock1, bank2Lock2, bank2Lock3)

  pass $ seconds 1

  (bidCid3_1, bank3Lock)
    <- submit bank3 do
      bidLockReq <- exercise bidderParticipationCid3 BidderParticipation_PlaceBid with
        price = 43.0
        quantity = 400000
      lockCashResult <- exercise bidLockReq PlaceBidBotTrigger_LockCash with
        cashDepositCids = [issuance.cashAssets.bank3CashDepositCid]
        cashAssetFungibleCid = issuance.rules.bank3CashFungibleCid
        lockRuleCid = issuance.rules.bank3LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank3BondSettlementCid

      let (bank3Lock, bidCid3_1, _) = fromSome $ eitherToOptional $ lockCashResult
      return (bidCid3_1, bank3Lock)

  pass $ seconds 1

  -- Bank2 notices the fat finger error and revokes its bid
  submit bank2 do
    exercise bidderParticipationCid2 $ AuctionBidderParticipantion_RevokeLockedBid bidCid2_3 bank2Lock3

  -- Bidding to the other auction -------------------
  (otherBidCid1_1, bank1Lock2)
    <- submit bank1 do
      bidLockReq <- exercise otherBidderParticipationCid1 BidderParticipation_PlaceBid with
        price = 50.0
        quantity = 500000
      lockCashResult <- exercise bidLockReq PlaceBidBotTrigger_LockCash with
        cashDepositCids = bank1RemainingCash
        cashAssetFungibleCid = issuance.rules.bank1CashFungibleCid
        lockRuleCid = issuance.rules.bank1LockRuleCid
        investorBondAssetSettlementCid = issuance.rules.bank1BondSettlementCid

      let (bank1Lock2, otherBidCid1_1, _) = fromSome $ eitherToOptional $ lockCashResult
      return (otherBidCid1_1, bank1Lock2)

  pass $ seconds 1

  return $ AuctionProgress
    auction'
    bidderParticipationCid1
    bidderParticipationCid2
    bidderParticipationCid3
    bidCid1_1
    bidCid2_1
    bidCid2_2
    bidCid3_1
    otherAuction'
    otherBidderParticipationCid1
    otherBidderParticipationCid2
    otherBidderParticipationCid3
    otherBidCid1_1
    [bank1Lock1]
    [bank2Lock1, bank2Lock2]
    [bank3Lock]
    [bank1Lock2]


finalizeAuction = \(auctionProgress: AuctionProgress) -> scenario do
  auctionAgent <- getParty "AuctionAgent"
  issuer <- getParty "Issuer"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"

  -- Finalization ------------------------

  passToDate $ auctionEndDate

  ([bank1SettleReq, bank2SettleReq, bank3SettleReq], _)  <- submit auctionAgent do
    auctionFinalizeBotTrigger <- exercise auctionProgress.auction Auction_Finalize
    exercise auctionFinalizeBotTrigger AuctionFinalizeBotTrigger_AllocateBond with
      participationCids = [auctionProgress.bidderParticipationCid1, auctionProgress.bidderParticipationCid2, auctionProgress.bidderParticipationCid3]
      bidCids = [auctionProgress.bidCid1_1, auctionProgress.bidCid2_1, auctionProgress.bidCid2_2, auctionProgress.bidCid3_1]

  -- Finalization of the other auction ------------------------

  ([otherSettleReq], Some remainedAssetFact)  <- submit auctionAgent do
    otherAuctionFinalizeBotTrigger <- exercise auctionProgress.otherAuction Auction_Finalize
    exercise otherAuctionFinalizeBotTrigger AuctionFinalizeBotTrigger_AllocateBond with
      participationCids = [auctionProgress.otherBidderParticipationCid1]
      bidCids = [auctionProgress.otherBidCid1_1]

  -- Checking result ----------------------

  submit bank1 do
    participantReq <- fetch bank1SettleReq
    settleReq <- fetch $ head participantReq.settleRequestCids
    settleReq.investor === bank1
    settleReq.cashAmountToPay === 42.0 * 200000.0

  submit bank2 do
    participantReq <- fetch bank2SettleReq
    settleReq <- fetch $ head participantReq.settleRequestCids
    settleReq.investor === bank2
    settleReq.cashAmountToPay === 42.0 * 400000.0
    tooLow <- fetch $ head participantReq.invalidBidNotificationCids
    tooLow.bid.bidder === bank2
    tooLow.bid.bidData.price === 25.0
    tooLow.reason === "The offered amount didn't reach the limit price"

  submit bank3 do
    participantReq <- fetch bank3SettleReq
    settleReq <- fetch $ head participantReq.settleRequestCids
    settleReq.investor === bank3
    settleReq.cashAmountToPay === 42.0 * 400000.0


  -- Checking result for the other auction ----------------------

  submit bank1 do
    participantReq <- fetch otherSettleReq
    settleReq <- fetch $ head participantReq.settleRequestCids
    settleReq.investor === bank1
    settleReq.cashAmountToPay === 50.0 * 500000.0

  return (SettleRequests with
      bank1SettleReqCid = bank1SettleReq
      bank2SettleReqCid = bank2SettleReq
      bank3SettleReqCid = bank3SettleReq
      otherSettleReqCid = otherSettleReq
    , remainedAssetFact)

doSettlement = \(issuance: TestIssuance)
                (settleRequests: SettleRequests)
                (auctionProgress: AuctionProgress) -> scenario do
  centralBank <- getParty "CentralBank"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  issuer <- getParty "Issuer"
  csd <- getParty "CSD"

  -- settle and verify the bonds are transferred to the investors' accounts

  (assetCid1, paymentCid1, rdmpPI1) <- submit bank1 do
    settlementStarted <- exercise settleRequests.bank1SettleReqCid AuctionParticipantSettleRequest_Settle
    [rdmpPayoutInfoCid] <- exercise settlementStarted InvestorSettlementBotTrigger_Finalize with
      cashAssetFungible = issuance.rules.bank1CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank1Locks
      investorCashSettlementCid = issuance.rules.bank1CashSettlementCid
    rdmpPayoutInfo <- fetch rdmpPayoutInfoCid
    let deliveryDepositCid = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
        paymentDepositCid = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
    deposit <- fetch deliveryDepositCid
    deposit.asset.quantity === 200000.0
    deposit.asset.id.label === "BOND-007"
    deposit.account.owner === bank1
    return (deliveryDepositCid, paymentDepositCid, rdmpPayoutInfoCid)

  (assetCid2, paymentCid2, rdmpPI2) <- submit bank2 do
    settlementStarted <- exercise settleRequests.bank2SettleReqCid AuctionParticipantSettleRequest_Settle
    [rdmpPayoutInfoCid] <- exercise  settlementStarted InvestorSettlementBotTrigger_Finalize with
      cashAssetFungible = issuance.rules.bank2CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank2Locks
      investorCashSettlementCid = issuance.rules.bank2CashSettlementCid
    rdmpPayoutInfo <- fetch rdmpPayoutInfoCid
    let deliveryDepositCid = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
        paymentDepositCid = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
    deposit <- fetch deliveryDepositCid
    deposit.asset.quantity === 400000.0
    deposit.asset.id.label === "BOND-007"
    deposit.account.owner === bank2
    return (deliveryDepositCid, paymentDepositCid, rdmpPayoutInfoCid)


  (assetCid3, paymentCid3, rdmpPI3) <- submit bank3 do
    settlementStarted <- exercise settleRequests.bank3SettleReqCid AuctionParticipantSettleRequest_Settle
    [rdmpPayoutInfoCid] <- exercise  settlementStarted InvestorSettlementBotTrigger_Finalize with
      cashAssetFungible = issuance.rules.bank3CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank3Locks
      investorCashSettlementCid = issuance.rules.bank3CashSettlementCid
    rdmpPayoutInfo <- fetch rdmpPayoutInfoCid
    let deliveryDepositCid = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
        paymentDepositCid = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
    deposit <- fetch deliveryDepositCid
    deposit.asset.quantity === 400000.0
    deposit.asset.id.label === "BOND-007"
    deposit.account.owner === bank3
    return (deliveryDepositCid, paymentDepositCid, rdmpPayoutInfoCid)

  -- verify that the Issuer received the money
  submit issuer do
    payment1 <- fetch paymentCid1
    payment1.asset.quantity === 8400000.0
    payment1.asset.id.label === "USD"

    payment2 <- fetch paymentCid2
    payment2.asset.quantity === 16800000.0
    payment2.asset.id.label === "USD"

    payment3 <- fetch paymentCid3
    payment3.asset.quantity === 16800000.0
    payment3.asset.id.label === "USD"

  return AssetsForRedemption with
    bank1BondDepositCid = assetCid1
    bank2BondDepositCid = assetCid2
    bank3BondDepositCid = assetCid3
    bank1RedemptionPayoutInfoCid = rdmpPI1
    bank2RedemptionPayoutInfoCid = rdmpPI2
    bank3RedemptionPayoutInfoCid = rdmpPI3

redemption = \(issuance: TestIssuance)
              (assetsForRedemption: AssetsForRedemption)
              (remainedBondDeposit: ContractId AssetDeposit)
              (settleRequests: SettleRequests) ->  scenario do
  centralBank <- getParty "CentralBank"
  issuer <- getParty "Issuer"
  bank1 <- getParty "Bank1"
  bank2 <- getParty "Bank2"
  bank3 <- getParty "Bank3"
  csd <- getParty "CSD"

  -- request redemption at CSD
  passToDate maturity

  (request, leftOverSettlementChain) <- submit issuer do
    redeemRequest <- exercise issuance.roles.issuerRoleCid $ IssuerRole_Redeem issuance.fixedRateBondFactCid
    otherParticipantReq <- fetch settleRequests.otherSettleReqCid
    otherSettleReq <- fetch $ head otherParticipantReq.settleRequestCids
    return (redeemRequest, otherSettleReq.bondSettlementChainCid)

  redemptionFinalizer <- submit csd do
    calc <- exercise request RedemptionRequest_Accept
    exercise calc $ RedemptionCalculationBotTrigger_Start
      [assetsForRedemption.bank1RedemptionPayoutInfoCid, assetsForRedemption.bank2RedemptionPayoutInfoCid, assetsForRedemption.bank3RedemptionPayoutInfoCid]
      [remainedBondDeposit]

  -- complete instructions

  payments <- submit issuer do
    exercise redemptionFinalizer $ RedemptionFinalizeBotTrigger_Finalize with
      cashAssetDepositCids = [issuance.cashAssets.issuerCashDepositCid] --transferRule splitAndMergeRule
      cashAssetSettlementCid = issuance.rules.issuerCashSettlementCid
      cashAssetFungibleCid = issuance.rules.issuerCashFungibleCid

  -- check payments

  submit bank1 do
    payment <- fetch $ head $ tail $ tail payments
    payment.asset.quantity === 8822000.0
    payment.asset.id.label === "USD"
    payment.account.owner === bank1

  submit bank2 do
    payment <- fetch $ head $ tail payments
    payment.asset.quantity === 17644000.0
    payment.asset.id.label === "USD"
    payment.account.owner === bank2

  submit bank3 do
    payment <- fetch $ head payments
    payment.asset.quantity === 17644000.0
    payment.asset.id.label === "USD"
    payment.account.owner === bank3

-- Test with walking through all the supported steps of the workflow
testFullScenario = scenario do
  passToDate $ date 2020 Jan 01
  issuance <- setupIssuance
  progress <- startAuction issuance
  (settleRequests, remainedBond) <- finalizeAuction progress
  assetsForRedemption <- doSettlement issuance settleRequests progress
  redemption issuance assetsForRedemption remainedBond settleRequests
  return ()
