--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE ApplicativeDo #-}
{-# OPTIONS -Wno-deprecations #-}

module DA.RefApps.Bond.Test.FullScenario where

import DA.Next.Set
import DA.Date
import DA.Either
import DA.List
import DA.Time
import DA.Optional
import DA.Assert

import Daml.Script

import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset

import DA.RefApps.Bond.Lock
import DA.RefApps.Bond.FixedRateBond
import DA.RefApps.Bond.Roles.CentralBankRole
import DA.RefApps.Bond.Roles.CsdRole
import DA.RefApps.Bond.Roles.OperatorRole
import DA.RefApps.Bond.Roles.AuctionAgentRole
import DA.RefApps.Bond.Roles.IssuerRole
import DA.RefApps.Bond.Roles.BankRole
import DA.RefApps.Bond.Auction
import DA.RefApps.Bond.Redemption
import DA.RefApps.Bond.Settlement
import DA.RefApps.Bond.Util

data TestRoles = TestRoles {
  issuerRoleCid: ContractId IssuerRole
, csdRoleCid: ContractId CsdRole
, centralBankRoleCid: ContractId CentralBankRole
}

data TestIssuance = TestIssuance {
  roles: TestRoles
, fixedRateBondFactCid: ContractId FixedRateBondFact
, bondBundleData: BondBundleData
, cashAccounts: Accounts
, bondAccounts: Accounts
, cashAssets: CashAssets
, rules: Rules
, cashAssetId: Id
}

data Accounts = Accounts {
  issuerAccount: Account
, bank1Account: Account
, bank2Account: Account
, bank3Account: Account
}

data CashAssets = CashAssets {
  issuerCashDepositCid: ContractId AssetDeposit
, bank1CashDepositCid: ContractId AssetDeposit
, bank2CashDepositCid: ContractId AssetDeposit
, bank3CashDepositCid: ContractId AssetDeposit
}

data AuctionProgress = AuctionProgress {
  auction: ContractId Auction
, bidderParticipationCid1 : ContractId BidderParticipation
, bidderParticipationCid2 : ContractId BidderParticipation
, bidderParticipationCid3 : ContractId BidderParticipation
, bidCid1_1 : ContractId AuctionBid
, bidCid2_1 : ContractId AuctionBid
, bidCid2_2 : ContractId AuctionBid
, bidCid3_1 : ContractId AuctionBid
, otherAuction: ContractId Auction
, otherBidderParticipationCid1: ContractId BidderParticipation
, otherBidderParticipationCid2: ContractId BidderParticipation
, otherBidderParticipationCid3: ContractId BidderParticipation
, otherBidCid1_1 : ContractId AuctionBid
, bank1Locks: [ContractId AuctionLockedCash]
, bank2Locks: [ContractId AuctionLockedCash]
, bank3Locks: [ContractId AuctionLockedCash]
, bank1OtherLocks: [ContractId AuctionLockedCash]
}

data SettleRequests = SettleRequests {
  bank1SettleReqCid: ContractId AuctionParticipantSettleRequest
, bank2SettleReqCid: ContractId AuctionParticipantSettleRequest
, bank3SettleReqCid: ContractId AuctionParticipantSettleRequest
, otherSettleReqCid: ContractId AuctionParticipantSettleRequest
}

data AssetsForRedemption = AssetsForRedemption {
  bank1BondDepositCid: ContractId AssetDeposit
, bank2BondDepositCid: ContractId AssetDeposit
, bank3BondDepositCid: ContractId AssetDeposit
, bank1RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
, bank2RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
, bank3RedemptionPayoutInfoCid: ContractId RedemptionPayoutInfo
}

data Rules = Rules {
  issuerCashSettlementCid: ContractId AssetSettlement
, bank1BondSettlementCid: ContractId AssetSettlement
, bank2BondSettlementCid: ContractId AssetSettlement
, bank3BondSettlementCid: ContractId AssetSettlement
, bank1CashSettlementCid: ContractId AssetSettlement
, bank2CashSettlementCid: ContractId AssetSettlement
, bank3CashSettlementCid: ContractId AssetSettlement
, issuerCashFungibleCid: ContractId AssetFungible
, bank1CashFungibleCid: ContractId AssetFungible
, bank2CashFungibleCid: ContractId AssetFungible
, bank3CashFungibleCid: ContractId AssetFungible
, bank1LockRuleCid: ContractId AssetLockRule
, bank2LockRuleCid: ContractId AssetLockRule
, bank3LockRuleCid: ContractId AssetLockRule
}

bondIsin: Text
bondIsin = "BOND-007"
auctionStartDate: Date
auctionStartDate = date 2020 Jan 10
auctionEndDate: Date
auctionEndDate = date 2020 Jan 20
maturity: Date
maturity = date 2022 Jan 20

data Parties = Parties with
  operator : Party
  regulator : Party
  auctionAgent : Party
  bank1 : Party
  bank2 : Party
  bank3 : Party
  bank4 : Party
  csd : Party
  issuer : Party
  centralBank : Party

allocateParties : Script Parties
allocateParties = do
  operator <- allocateParty "Operator"
  regulator <- allocateParty "Regulator"
  auctionAgent <- allocateParty "AuctionAgent"
  bank1 <- allocateParty "Bank1"
  bank2 <- allocateParty "Bank2"
  bank3 <- allocateParty "Bank3"
  bank4 <- allocateParty "Bank4"
  csd <- allocateParty "Csd"
  issuer <- allocateParty "Issuer"
  centralBank <- allocateParty "CentralBank"
  pure Parties with ..

setupRoles: Parties -> Script TestRoles
setupRoles Parties{..} = script do


  operatorCid <- submit operator do
    createCmd OperatorRole with
      operator = operator
      regulators = [regulator]
  (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, bankInvitationCid4, csdInvitationCid, issuerCid, centralBankCid)
    <- submit operator do
      auctionAgentInvitationCid
        <- exerciseCmd operatorCid OperatorRole_InviteAuctionAgent with
              auctionAgent = auctionAgent
      bankInvitationCid1
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank1
      bankInvitationCid2
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank2
      bankInvitationCid3
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank3
      bankInvitationCid4
        <- exerciseCmd operatorCid OperatorRole_InviteBank with
              bank = bank4
      csdInvitationCid
        <- exerciseCmd operatorCid OperatorRole_InviteCsd with
              csd = csd
      issuerCid
        <- exerciseCmd operatorCid OperatorRole_InviteIssuer with
              issuer = issuer
              bondProvider = csd
              cashProvider = centralBank
              auctionAgent = auctionAgent
      centralBankCid
        <- exerciseCmd operatorCid OperatorRole_InviteCentralBank with
              centralBank = centralBank
      pure (auctionAgentInvitationCid, bankInvitationCid1, bankInvitationCid2, bankInvitationCid3, bankInvitationCid4, csdInvitationCid, issuerCid, centralBankCid)

  auctionAgentRole <- submit auctionAgent do
    exerciseCmd auctionAgentInvitationCid AuctionAgentRoleInvitation_Accept

  bankRole1Cid <- submit bank1 do
    exerciseCmd bankInvitationCid1 BankRoleInvitation_Accept

  bankRole2Cid <- submit bank2 do
    exerciseCmd bankInvitationCid2 BankRoleInvitation_Accept

  bankRole3Cid <- submit bank3 do
    exerciseCmd bankInvitationCid3 BankRoleInvitation_Accept

  bankRole4Cid <- submit bank4 do
    exerciseCmd bankInvitationCid4 BankRoleInvitation_Reject

  csdRole <- submit csd do
    exerciseCmd csdInvitationCid CsdRoleInvitation_Accept

  issuerRole <- submit issuer do
    exerciseCmd issuerCid IssuerRoleInvitation_Accept

  centralBankRoleCid <- submit centralBank do
    exerciseCmd centralBankCid CentralBankRoleInvitation_Accept
  pure TestRoles {
    issuerRoleCid = issuerRole
  , csdRoleCid = csdRole
  , centralBankRoleCid = centralBankRoleCid
  }

createAccount: Party -> Party -> Text -> Account
createAccount owner provider label =
  Account with
    id = Id with
      signatories = fromList [provider]
      label = label
      version = 0
    provider = provider
    owner = owner


setupIssuance: Parties -> Script TestIssuance
setupIssuance parties@Parties{..} = script do
  testRoles <- setupRoles parties
  let issuerCashAccount = createAccount issuer centralBank "IssuerCashAccount"
      bank1CashAccount = createAccount bank1 centralBank "Bank1CashAccount"
      bank2CashAccount = createAccount bank2 centralBank "Bank2CashAccount"
      bank3CashAccount = createAccount bank3 centralBank "Bank3CashAccount"
      issuerBondAccount = createAccount issuer csd "IssuerBondAccount"
      bank1BondAccount = createAccount bank1 csd "Bank1BondAccount"
      bank2BondAccount = createAccount bank2 csd "Bank2BondAccount"
      bank3BondAccount = createAccount bank3 csd "Bank3BondAccount"

  -- Rules and cash
  (bank1CashSettlement, bank1Fungible, bank1Lock, bank1CashAsset) <- submit centralBank do
    bank1CashAsset <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank1CashAccount "USD" 50000000.0
    bank1Settlement <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank1CashAccount []
    bank1Fungible <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank1CashAccount
    bank1Lock <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank1CashAccount
    pure (bank1Settlement, bank1Fungible, bank1Lock, bank1CashAsset)
  (bank2CashSettlement, bank2Fungible, bank2Lock, bank2CashAsset) <- submit centralBank do
    bank2CashAsset <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank2CashAccount "USD" 600000000.0
    bank2Settlement <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank2CashAccount []
    bank2Fungible <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank2CashAccount
    bank2Lock <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank2CashAccount
    pure (bank2Settlement, bank2Fungible, bank2Lock, bank2CashAsset)
  (bank3CashSettlement, bank3Fungible, bank3Lock, bank3CashAsset) <- submit centralBank do
    bank3CashAsset <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_IssueCash bank3CashAccount "USD" 30000000.0
    bank3Settlement <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule bank3CashAccount []
    bank3Fungible <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule bank3CashAccount
    bank3Lock <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateLockRule bank3CashAccount
    pure (bank3Settlement, bank3Fungible, bank3Lock, bank3CashAsset)

  (issuerCashAsset, issuerCashSettlement, issuerCashFungibleCid) <- submit centralBank do
    issuerCashAsset <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_IssueCash issuerCashAccount "USD" 100000000.0
    issuerCashSettlement <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateSettlementRule issuerCashAccount [auctionAgent, bank1, bank2, bank3]
    issuerCashFungibleCid <- exerciseCmd testRoles.centralBankRoleCid $ CentralBankRole_CreateFungibleRule issuerCashAccount
    pure (issuerCashAsset, issuerCashSettlement, issuerCashFungibleCid)

  (issuerFungibleRule, issuerBondSettlement) <- submit csd do
    issuerFungibleRule <- exerciseCmd testRoles.csdRoleCid $ CsdRole_CreateFungibleRule issuerBondAccount [auctionAgent]
    issuerSettlementRule <- exerciseCmd testRoles.csdRoleCid $ CsdRole_CreateSettlementRule issuerBondAccount [auctionAgent, bank1, bank2, bank3]
    pure (issuerFungibleRule, issuerSettlementRule)

  (bank1BondSettlement, bank2BondSettlement, bank3BondSettlement) <- submit csd do
    bank1Settlement <- exerciseCmd testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank1BondAccount []
    bank2Settlement <- exerciseCmd testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank2BondAccount []
    bank3Settlement <- exerciseCmd testRoles.csdRoleCid $ CsdRole_CreateSettlementRule bank3BondAccount []
    pure (bank1Settlement, bank2Settlement, bank3Settlement)

  -- Bond Issuance ------------------------
  now <- toDateUTC <$> getTime
  let (year, month, day) = toGregorian auctionEndDate
      cashAssetId = Id with
        signatories = fromList [centralBank]
        label = "USD"
        version = 0
  accProviderApprovalReqCid <- submit issuer do
    exerciseCmd testRoles.issuerRoleCid IssuerRole_Issuance with
      issueSize = 3000000
      issueDate = now
      currency = cashAssetId.label
      denomination = 40.1
      maturityDate = maturity
      couponRate = 0.1
      couponDates = [date (year + 1) month day] -- plus maturity

  (fixedRateBondFactCid, assetDepositCid) <- submit csd do
    exerciseCmd accProviderApprovalReqCid IssuanceRequest_Accept with isin = bondIsin

  let cashAccounts = Accounts issuerCashAccount bank1CashAccount bank2CashAccount bank3CashAccount
  let bondAccounts = Accounts issuerBondAccount bank1BondAccount bank2BondAccount bank3BondAccount
  let cashAssets = CashAssets issuerCashAsset bank1CashAsset bank2CashAsset bank3CashAsset
  let rules = Rules
        issuerCashSettlement
        bank1BondSettlement
        bank2BondSettlement
        bank3BondSettlement
        bank1CashSettlement
        bank2CashSettlement
        bank3CashSettlement
        issuerCashFungibleCid
        bank1Fungible
        bank2Fungible
        bank3Fungible
        bank1Lock
        bank2Lock
        bank3Lock

  let bondBundleData = BondBundleData with
                      assetDepositCid = assetDepositCid
                      assetFungibleCid = issuerFungibleRule
                      bondSettlementCid = issuerBondSettlement
                      cashSettlementCid = issuerCashSettlement
                      assetLabel = bondIsin, ..
      cashAssetId = Id (DA.Next.Set.singleton centralBank) "USD" 0
  pure TestIssuance {
    roles = testRoles
  , fixedRateBondFactCid = fixedRateBondFactCid
  , bondBundleData = bondBundleData
  , cashAccounts
  , bondAccounts
  , cashAssets
  , rules
  , cashAssetId
  }

{-
  Example scenario
  - minPrice = 40
  - auctionSize = 10000000

 | Bidder | Price | Quantity | Time |
 | Bank1  | 42    | 200000   | t1   |
 | Bank2  | 25    | 800000   | t2   |
 | Bank2  | 42    | 500000   | t3   |
 | Bank3  | 43    | 400000   | t4   |
 t1 < t2 < t3 < t4

 AuctionAgent orders the bids by price and time:
 | Bank3 | 43 | 400000           | t4 <- highest price
 | Bank1 | 42 | 200000           | t1 <- this happened before the other 42 bid
 | Bank2 | 42 | 500000 -> 400000 | t3 <- only 400000 items remained
 the last bid does not meet the the minimum price requirement

 The actual price is set by the lowest successful bid: 42

 Then the algorhitm will create Dvps:
 | Bidder  | Cash        |
 | Bank3   | 42 * 400000 |
 | Bank1   | 42 * 200000 |
 | Bank2   | 42 * 400000 |

There is a parallely going auction of the same
-}
startAuction: Parties -> TestIssuance -> Script AuctionProgress
startAuction Parties{..} issuance = script do
  setTime (time auctionStartDate 0 0 0)

  -- Auction ----------------------------
  commissionedCid <- submit issuer do
    exerciseCmd issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = issuance.bondBundleData.assetDepositCid
      startDate = auctionStartDate
      endDate = auctionEndDate
      minPrice = 40.0
      size = 1000000
  (auctionInvitationCid, remainingAssets) <- submit issuer do
    exerciseCmd commissionedCid CommissionBotTrigger_InviteAgent with
      bondAssetFungibleCid = issuance.bondBundleData.assetFungibleCid
      bondAssetSettlementCid = issuance.bondBundleData.bondSettlementCid
      cashAssetSettlementCid = issuance.bondBundleData.cashSettlementCid
      fixedRateBondFactCid = issuance.fixedRateBondFactCid

  auctionCid <- submit auctionAgent do
    exerciseCmd auctionInvitationCid AuctionInvitation_Accept with
      auctionName = "testAuction"
  (auction', [bidderParticipationCid1, bidderParticipationCid2, bidderParticipationCid3]) <- submit auctionAgent do
    exerciseCmd auctionCid Auction_InviteBidders with
      bidders = [bank1, bank2, bank3]

  passTime $ seconds 1

  -- Another parallel auction ----------------------------
  otherCommissionedCid <- submit issuer do
    exerciseCmd issuance.roles.issuerRoleCid IssuerRole_CommissionAuction with
      bondAssetDepositCid = head remainingAssets
      startDate = auctionStartDate
      endDate = auctionEndDate
      minPrice = 50.0
      size = 2000000
  (otherAuctionInvitation, _) <- submit issuer do

    exerciseCmd otherCommissionedCid CommissionBotTrigger_InviteAgent with
      bondAssetFungibleCid = issuance.bondBundleData.assetFungibleCid
      bondAssetSettlementCid = issuance.bondBundleData.bondSettlementCid
      cashAssetSettlementCid = issuance.bondBundleData.cashSettlementCid
      fixedRateBondFactCid = issuance.fixedRateBondFactCid

  otherAuctionCid <- submit auctionAgent do
    exerciseCmd otherAuctionInvitation AuctionInvitation_Accept with
      auctionName = "otherTestAuction"
  (otherAuction', [otherBidderParticipationCid1, otherBidderParticipationCid2, otherBidderParticipationCid3]) <- submit auctionAgent do

    exerciseCmd otherAuctionCid Auction_InviteBidders with
      bidders = [bank1, bank2, bank3]

  passTime $ seconds 1

  -- Bidding -------------------

  bidLockReq <- submit bank1 do
    exerciseCmd bidderParticipationCid1 BidderParticipation_PlaceBid with
      price = 42.0
      quantity = 200000
  lockCashResult <- submit bank1 do
    exerciseCmd bidLockReq PlaceBidBotTrigger_LockCash with
      cashDepositCids = [issuance.cashAssets.bank1CashDepositCid]
      cashAssetFungibleCid = issuance.rules.bank1CashFungibleCid
      lockRuleCid = issuance.rules.bank1LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank1BondSettlementCid
  let (bank1Lock1, bidCid1_1, bank1RemainingCash) = fromSome $ eitherToOptional $ lockCashResult


  passTime $ seconds 1

  bidLockReq1 <- submit bank2 do
    exerciseCmd bidderParticipationCid2 BidderParticipation_PlaceBid with
      price = 25.0
      quantity = 800000
  lockCashResult1 <- submit bank2 do
    exerciseCmd bidLockReq1 PlaceBidBotTrigger_LockCash with
      cashDepositCids = [issuance.cashAssets.bank2CashDepositCid]
      cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
      lockRuleCid = issuance.rules.bank2LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid
  let (bank2Lock1, bidCid2_1, rest) = fromSome $ eitherToOptional $ lockCashResult1
  bidLockReq2 <- submit bank2 do
    exerciseCmd bidderParticipationCid2 BidderParticipation_PlaceBid with
      price = 42.0
      quantity = 500000
  lockCashResult2 <- submit bank2 do
    exerciseCmd bidLockReq2 PlaceBidBotTrigger_LockCash with
      cashDepositCids = rest
      cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
      lockRuleCid = issuance.rules.bank2LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid
  let (bank2Lock2, bidCid2_2, rest') = fromSome $ eitherToOptional $ lockCashResult2
  bidLockReq3 <- submit bank2 do
    exerciseCmd bidderParticipationCid2 BidderParticipation_PlaceBid with
      price = 422.0 -- fat finger error
      quantity = 500000
  lockCashResult3 <- submit bank2 do
    exerciseCmd bidLockReq3 PlaceBidBotTrigger_LockCash with
      cashDepositCids = rest'
      cashAssetFungibleCid = issuance.rules.bank2CashFungibleCid
      lockRuleCid = issuance.rules.bank2LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank2BondSettlementCid
  let (bank2Lock3, bidCid2_3, _) = fromSome $ eitherToOptional $ lockCashResult3

  passTime $ seconds 1

  bidLockReq <- submit bank3 do
    exerciseCmd bidderParticipationCid3 BidderParticipation_PlaceBid with
      price = 43.0
      quantity = 400000
  lockCashResult <- submit bank3 do
    exerciseCmd bidLockReq PlaceBidBotTrigger_LockCash with
      cashDepositCids = [issuance.cashAssets.bank3CashDepositCid]
      cashAssetFungibleCid = issuance.rules.bank3CashFungibleCid
      lockRuleCid = issuance.rules.bank3LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank3BondSettlementCid
  let (bank3Lock, bidCid3_1, _) = fromSome $ eitherToOptional $ lockCashResult
  passTime $ seconds 1

  -- Bank2 notices the fat finger error and revokes its bid
  submit bank2 do
    exerciseCmd bidderParticipationCid2 $ AuctionBidderParticipantion_RevokeLockedBid bidCid2_3 bank2Lock3

  -- Bidding to the other auction -------------------
  bidLockReq <- submit bank1 do
    exerciseCmd otherBidderParticipationCid1 BidderParticipation_PlaceBid with
      price = 50.0
      quantity = 500000
  lockCashResult <- submit bank1 do
    exerciseCmd bidLockReq PlaceBidBotTrigger_LockCash with
      cashDepositCids = bank1RemainingCash
      cashAssetFungibleCid = issuance.rules.bank1CashFungibleCid
      lockRuleCid = issuance.rules.bank1LockRuleCid
      investorBondAssetSettlementCid = issuance.rules.bank1BondSettlementCid
  let (bank1Lock2, otherBidCid1_1, _) = fromSome $ eitherToOptional $ lockCashResult

  passTime $ seconds 1

  pure $ AuctionProgress
    auction'
    bidderParticipationCid1
    bidderParticipationCid2
    bidderParticipationCid3
    bidCid1_1
    bidCid2_1
    bidCid2_2
    bidCid3_1
    otherAuction'
    otherBidderParticipationCid1
    otherBidderParticipationCid2
    otherBidderParticipationCid3
    otherBidCid1_1
    [bank1Lock1]
    [bank2Lock1, bank2Lock2]
    [bank3Lock]
    [bank1Lock2]


finalizeAuction: Parties -> AuctionProgress -> Script (SettleRequests, ContractId AssetDeposit)
finalizeAuction Parties{..} auctionProgress = script do
  -- Finalization ------------------------

  setTime (time auctionEndDate 0 0 0)

  auctionFinalizeBotTrigger <- submit auctionAgent do
    exerciseCmd auctionProgress.auction Auction_Finalize
  ([bank1SettleReq, bank2SettleReq, bank3SettleReq], _)  <- submit auctionAgent do
    exerciseCmd auctionFinalizeBotTrigger AuctionFinalizeBotTrigger_AllocateBond with
      participationCids = [auctionProgress.bidderParticipationCid1, auctionProgress.bidderParticipationCid2, auctionProgress.bidderParticipationCid3]
      bidCids = [auctionProgress.bidCid1_1, auctionProgress.bidCid2_1, auctionProgress.bidCid2_2, auctionProgress.bidCid3_1]

  -- Finalization of the other auction ------------------------

  otherAuctionFinalizeBotTrigger <- submit auctionAgent do
    exerciseCmd auctionProgress.otherAuction Auction_Finalize
  ([otherSettleReq], Some remainedAssetFact)  <- submit auctionAgent do
    exerciseCmd otherAuctionFinalizeBotTrigger AuctionFinalizeBotTrigger_AllocateBond with
      participationCids = [auctionProgress.otherBidderParticipationCid1]
      bidCids = [auctionProgress.otherBidCid1_1]

  -- Checking result ----------------------

  Some participantReq <- queryContractId bank1 bank1SettleReq
  Some settleReq <- queryContractId bank1 $ head participantReq.settleRequestCids
  settleReq.investor === bank1
  settleReq.cashAmountToPay === 42.0 * 200000.0

  Some participantReq <- queryContractId bank2 bank2SettleReq
  Some settleReq <- queryContractId bank2 $ head participantReq.settleRequestCids
  settleReq.investor === bank2
  settleReq.cashAmountToPay === 42.0 * 400000.0
  Some tooLow <- queryContractId bank2 $ head participantReq.invalidBidNotificationCids
  tooLow.bid.bidder === bank2
  tooLow.bid.bidData.price === 25.0
  tooLow.reason === "The offered amount didn't reach the limit price"

  Some participantReq <- queryContractId bank3 bank3SettleReq
  Some settleReq <- queryContractId bank3 $ head participantReq.settleRequestCids
  settleReq.investor === bank3
  settleReq.cashAmountToPay === 42.0 * 400000.0


  -- Checking result for the other auction ----------------------

  Some participantReq <- queryContractId bank1 otherSettleReq
  Some settleReq <- queryContractId bank1 $ head participantReq.settleRequestCids
  settleReq.investor === bank1
  settleReq.cashAmountToPay === 50.0 * 500000.0

  pure (SettleRequests with
      bank1SettleReqCid = bank1SettleReq
      bank2SettleReqCid = bank2SettleReq
      bank3SettleReqCid = bank3SettleReq
      otherSettleReqCid = otherSettleReq
    , remainedAssetFact)

doSettlement: Parties -> TestIssuance -> SettleRequests -> AuctionProgress -> Script AssetsForRedemption
doSettlement Parties{..} issuance settleRequests auctionProgress = script do
  -- settle and verify the bonds are transferred to the investors' accounts

  settlementStarted <- submit bank1 do
    exerciseCmd settleRequests.bank1SettleReqCid AuctionParticipantSettleRequest_Settle
  [rdmpPI1] <- submit bank1 do
    exerciseCmd settlementStarted InvestorSettlement_Finalize with
      cashAssetFungible = issuance.rules.bank1CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank1Locks
      investorCashSettlementCid = issuance.rules.bank1CashSettlementCid
  Some rdmpPayoutInfo <- queryContractId bank1 rdmpPI1
  let assetCid1 = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
      paymentCid1 = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
  Some deposit <- queryContractId bank1 assetCid1
  deposit.asset.quantity === 200000.0
  deposit.asset.id.label === "BOND-007"
  deposit.account.owner === bank1

  settlementStarted <- submit bank2 do
    exerciseCmd settleRequests.bank2SettleReqCid AuctionParticipantSettleRequest_Settle
  [rdmpPI2] <- submit bank2 do
    exerciseCmd  settlementStarted InvestorSettlement_Finalize with
      cashAssetFungible = issuance.rules.bank2CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank2Locks
      investorCashSettlementCid = issuance.rules.bank2CashSettlementCid
  Some rdmpPayoutInfo <- queryContractId bank2 rdmpPI2
  let assetCid2 = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
      paymentCid2 = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
  Some deposit <- queryContractId bank2 assetCid2
  deposit.asset.quantity === 400000.0
  deposit.asset.id.label === "BOND-007"
  deposit.account.owner === bank2

  settlementStarted <- submit bank3 do
    exerciseCmd settleRequests.bank3SettleReqCid AuctionParticipantSettleRequest_Settle
  [rdmpPI3] <- submit bank3 do
    exerciseCmd settlementStarted InvestorSettlement_Finalize with
      cashAssetFungible = issuance.rules.bank3CashFungibleCid
      auctionLockedCashCids = auctionProgress.bank3Locks
      investorCashSettlementCid = issuance.rules.bank3CashSettlementCid
  Some rdmpPayoutInfo <- queryContractId bank3 rdmpPI3
  let assetCid3 = head $ head rdmpPayoutInfo.settlementResult.deliveryDepositCids
      paymentCid3 = head $ head rdmpPayoutInfo.settlementResult.paymentDepositCids
  Some deposit <- queryContractId bank3 assetCid3
  deposit.asset.quantity === 400000.0
  deposit.asset.id.label === "BOND-007"
  deposit.account.owner === bank3

  -- verify that the Issuer received the money
  Some payment1 <- queryContractId issuer paymentCid1
  payment1.asset.quantity === 8400000.0
  payment1.asset.id.label === "USD"

  Some payment2 <- queryContractId issuer paymentCid2
  payment2.asset.quantity === 16800000.0
  payment2.asset.id.label === "USD"

  Some payment3 <- queryContractId issuer paymentCid3
  payment3.asset.quantity === 16800000.0
  payment3.asset.id.label === "USD"

  pure AssetsForRedemption with
    bank1BondDepositCid = assetCid1
    bank2BondDepositCid = assetCid2
    bank3BondDepositCid = assetCid3
    bank1RedemptionPayoutInfoCid = rdmpPI1
    bank2RedemptionPayoutInfoCid = rdmpPI2
    bank3RedemptionPayoutInfoCid = rdmpPI3

redemption: Parties -> TestIssuance -> AssetsForRedemption -> ContractId AssetDeposit -> SettleRequests -> Script ()
redemption Parties{..} issuance assetsForRedemption remainedBondDeposit settleRequests = script do
  -- request redemption at CSD
  setTime (time maturity 0 0 0)

  request <- submit issuer do
    exerciseCmd issuance.roles.issuerRoleCid $ IssuerRole_Redeem issuance.fixedRateBondFactCid
  Some otherParticipantReq <- queryContractId issuer settleRequests.otherSettleReqCid
  Some otherSettleReq <- queryContractId issuer $ head otherParticipantReq.settleRequestCids

  calc <- submit csd do
    exerciseCmd request RedemptionRequest_Accept
  Some redemptionFinalizer <- submit csd do
    exerciseCmd calc $ RedemptionCalculationBotTrigger_Start
      [assetsForRedemption.bank1RedemptionPayoutInfoCid, assetsForRedemption.bank2RedemptionPayoutInfoCid, assetsForRedemption.bank3RedemptionPayoutInfoCid]
      [remainedBondDeposit]

  -- complete instructions

  payments <- submit issuer do
    exerciseCmd redemptionFinalizer $ RedemptionFinalizeBotTrigger_Finalize with
      cashAssetDepositCids = [issuance.cashAssets.issuerCashDepositCid] --transferRule splitAndMergeRule
      cashAssetSettlementCid = issuance.rules.issuerCashSettlementCid
      cashAssetFungibleCid = issuance.rules.issuerCashFungibleCid

  -- check payments

  Some payment <- queryContractId bank1 $ head $ tail $ tail payments
  payment.asset.quantity === 8822000.0
  payment.asset.id.label === "USD"
  payment.account.owner === bank1

  Some payment <- queryContractId bank2 $ head $ tail payments
  payment.asset.quantity === 17644000.0
  payment.asset.id.label === "USD"
  payment.account.owner === bank2

  Some payment <- queryContractId bank3 $ head payments
  payment.asset.quantity === 17644000.0
  payment.asset.id.label === "USD"
  payment.account.owner === bank3

-- Test with walking through all the supported steps of the workflow
testFullScenario: Script ()
testFullScenario = script do
  parties <- allocateParties
  setTime (time (date 2020 Jan 01) 0 0 0)
  issuance <- setupIssuance parties
  progress <- startAuction parties issuance
  (settleRequests, remainedBond) <- finalizeAuction parties progress
  assetsForRedemption <- doSettlement parties issuance settleRequests progress
  redemption parties issuance assetsForRedemption remainedBond settleRequests
  pure ()
