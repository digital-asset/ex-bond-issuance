--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Settlement where

import DA.Finance.Rule.Trade.Dvp
import DA.Finance.Fact.Trade.Dvp
import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset


import DA.RefApps.Bond.Redemption
import DA.RefApps.Bond.Lock
import DA.List
import DA.Next.Set as Set
import DA.Optional
import DA.Action
import DA.RefApps.Bond.Util


-- This template is used to collect the allocation details for a particular DvP created
-- from a successful bid
template AuctionSettleRequest
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    issuerCashAccountProvider: Party
    issuerBondAssetDepositCid: ContractId AssetDeposit
    issuerBondAssetDeposit: AssetDeposit
    cashAmountToPay: Decimal
    bondSettlementChainCid: ContractId AssetSettlementChain
    issuerCashSettlementCid: ContractId AssetSettlement
    regulators: [Party]
  where
    signatory issuer
    observer investor :: regulators

-- Triggers the settlement bot which settles all the DvPs on behalf an investor party.
-- It unlocks all the previously locked cash, executes the payment, receives the bonds and
-- releases the remaining cash to the investor's account.
template InvestorSettlementBotTrigger
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    settleRequestCids: [ContractId AuctionSettleRequest]
    cashProvider: Party
    regulators: [Party]
  where
    signatory investor, issuer, auctionAgent
    observer regulators

    controller investor can
      InvestorSettlementBotTrigger_Finalize: [ContractId RedemptionPayoutInfo]
        with
          auctionLockedCashCids: [ContractId AuctionLockedCash]
          cashAssetFungible: ContractId AssetFungible
          investorCashSettlementCid: ContractId AssetSettlement
        do

          -- unlock
          investorCashAssetDepositCids <- forA auctionLockedCashCids \lockCid -> do
            lock <- fetch lockCid
            assertMsg "Lock should be owned by the settling party" $ lock.owner == investor
            assertMsg "AuctionLockedCash should match the auction" $ lock.auctionName == auctionName && lock.auctionAgent == auctionAgent
            unlocked <- exercise lockCid AuctionLockedCash_Unlock
            return unlocked

          -- process all settle requests
          (_, payoutInfos) <- foldlA (\(remaining, redemptionPayouts) settleRequestCid -> do

            -- create DvP
            settleRequest <- fetch $ head settleRequestCids
            let firstCashAssetCid = head remaining
            firstCashAsset <- fetch firstCashAssetCid
            mergeResult <- mergeForQuantity firstCashAssetCid firstCashAsset (tail remaining) settleRequest.cashAmountToPay cashAssetFungible
            assertMsg "Locked cash should be sufficient to finalize settlement" $ isSome mergeResult
            let (cashMergedForQuantityCid, remainingNew)  = fromSome $ mergeResult
            cashMergedForQuantity <- fetch cashMergedForQuantityCid
            let delivery = settleRequest.issuerBondAssetDeposit.asset
                payment = cashMergedForQuantity.asset

            bondChain <- fetch settleRequest.bondSettlementChainCid

            dvpCid <- create Dvp with
              masterAgreement = bondChain.masterAgreement
              tradeId = bondChain.tradeId
              buyer = investor
              status = SettlementStatus_Instructed
              settlementDate = None
              payments = [payment]
              deliveries = [delivery]
              observers = Set.fromList regulators

            let cashSettlementStep = AssetSettlementStep with
                    sender = investor
                    receiver = issuer
                    depositCid = None
                    creditSettlementCid = investorCashSettlementCid
                    debitSettlementCid = settleRequest.issuerCashSettlementCid

            cashChain <- create AssetSettlementChain with
              masterAgreement = bondChain.masterAgreement
              tradeId = bondChain.tradeId
              asset = cashMergedForQuantity.asset
              steps = [cashSettlementStep]
              observers = Set.fromList regulators

            allocatedCashChain <- exercise cashChain $ AssetSettlementChain_AllocateNext cashMergedForQuantityCid

            let settleParam = DvpSettlement_Process_Param with
                  dvpCid = dvpCid
                  paymentChainCids = [allocatedCashChain]
                  deliveryChainCids = [settleRequest.bondSettlementChainCid]

            dvpSettlement <- create DvpSettlement with
              masterAgreement = bondChain.masterAgreement
              observers = Set.fromList regulators

            result <- exercise dvpSettlement DvpSettlement_Process1 with
              param = settleParam

            redemptionPayout <- create RedemptionPayoutInfo with
                  issuer = issuer
                  investor = investor
                  bondInstrumentId = delivery.id
                  bondAccountProvider = settleRequest.issuerBondAssetDeposit.account.provider
                  investorCashAccount = firstCashAsset.account
                  settlementResult = result
                  investorCashAssetSettlementCid = investorCashSettlementCid
                  regulators = regulators

            return (remainingNew, redemptionPayout :: redemptionPayouts)
            ) (investorCashAssetDepositCids, []) settleRequestCids

          forA settleRequestCids \sr -> archive sr
          return payoutInfos
