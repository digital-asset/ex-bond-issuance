--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# OPTIONS -Wno-deprecations #-}

module DA.RefApps.Bond.Settlement where

import DA.Finance.Trade.Dvp
import DA.Finance.Trade.Dvp.Settlement
import DA.Finance.Asset

import DA.Finance.Types


import DA.RefApps.Bond.Redemption
import DA.RefApps.Bond.Lock
import DA.List
import DA.Set as Set
import DA.Optional
import DA.Action
import DA.RefApps.Bond.Util
import DA.Finance.Trade.SettlementInstruction



-- This template is used to collect the allocation details for a particular DvP created
-- from a successful bid
template AuctionSettleRequest
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    issuerCashAccountProvider: Party
    issuerBondAssetDepositCid: ContractId AssetDeposit
    issuerBondAssetDeposit: AssetDeposit
    cashAmountToPay: Decimal
    bondSettlementChainCid: ContractId SettlementInstruction
    issuerCashSettlementCid: Account -- ContractId AssetSettlementRule
    cashAssetId: Id
    regulators: [Party]
  where
    signatory issuer
    observer investor :: regulators

-- Triggers the settlement bot which settles all the DvPs on behalf an investor party.
-- It unlocks all the previously locked cash, executes the payment, receives the bonds and
-- releases the remaining cash to the investor's account.
template InvestorSettlement
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    settleRequestCids: [ContractId AuctionSettleRequest]
    cashProvider: Party
    regulators: [Party]
  where
    signatory investor, issuer, auctionAgent
    observer regulators

    controller investor can
      InvestorSettlement_Finalize: [ContractId RedemptionPayoutInfo]
        with
          auctionLockedCashCids: [ContractId AuctionLockedCash]
          cashAssetFungible: ContractId AssetDeposit
          investorCashSettlementCid: Account -- ContractId AssetSettlementRule
        do

          -- unlock
          investorCashAssetDepositCids <- forA auctionLockedCashCids \lockCid -> do
            lock <- fetch lockCid
            assertMsg "Lock should be owned by the settling party" $ lock.owner == investor
            assertMsg "AuctionLockedCash should match the auction" $ lock.auctionName == auctionName && lock.auctionAgent == auctionAgent
            exercise lockCid AuctionLockedCash_Unlock

          -- process all settle requests
          (_, payoutInfos) <- foldlA (\(remaining, redemptionPayouts) settleRequestCid -> do

            -- create DvP
            settleRequest <- fetch settleRequestCid
            let firstCashAssetCid = head remaining
            firstCashAsset <- fetch firstCashAssetCid
            mergeResult <- mergeForQuantity firstCashAssetCid firstCashAsset (tail remaining) settleRequest.cashAmountToPay cashAssetFungible
            assertMsg "Locked cash should be sufficient to finalize settlement" $ isSome mergeResult
            let (cashMergedForQuantityCid, remainingNew)  = fromSome $ mergeResult
            cashMergedForQuantity <- fetch cashMergedForQuantityCid
            let delivery = settleRequest.issuerBondAssetDeposit.asset
                payment = cashMergedForQuantity.asset

            bondChain <- fetch settleRequest.bondSettlementChainCid

            dvpCid <- create Dvp with
              masterAgreement = bondChain.masterAgreement
              tradeId = bondChain.tradeId
              buyer = investor
              status = SettlementStatus_Instructed
              settlementDate = None
              payments = [payment]
              deliveries = [delivery]
              observers = Set.fromList regulators

            let cashSettlementStep = SettlementDetails with
                    depositCid = None
                    receiverAccount = investorCashSettlementCid
                    senderAccount = settleRequest.issuerCashSettlementCid

            cashChain <- create SettlementInstruction with
              masterAgreement = bondChain.masterAgreement
              tradeId = bondChain.tradeId
              asset = cashMergedForQuantity.asset
              steps = [cashSettlementStep]
              observers = Set.fromList regulators

            allocatedCashChain <- exercise cashChain SettlementInstruction_AllocateNext with ctrl = investor, depositCid = cashMergedForQuantityCid

            dvpSettlement <- create DvpSettlementRule with
              masterAgreement = bondChain.masterAgreement
              -- observers = Set.fromList regulators

            result <- exercise dvpSettlement DvpSettlement_Process with
              dvpCid=dvpCid
              paymentInstructionCids=[]
              deliveryInstructionCids=[]
              ctrl=bondChain.masterAgreement.party1

            redemptionPayout <- create RedemptionPayoutInfo with
                  issuer = issuer
                  investor = investor
                  bondInstrumentId = delivery.id
                  bondAccountProvider = settleRequest.issuerBondAssetDeposit.account.provider
                  investorCashAccount = firstCashAsset.account
                  settlementResult = result
                  investorCashAssetSettlementCid = investorCashSettlementCid
                  regulators = regulators

            return (remainingNew, redemptionPayout :: redemptionPayouts)
            ) (investorCashAssetDepositCids, []) settleRequestCids

          forA settleRequestCids archive
          return payoutInfos
