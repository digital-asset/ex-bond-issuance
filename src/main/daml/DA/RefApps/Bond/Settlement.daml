--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Settlement where

import DA.Finance.Rule.Trade.Dvp
import DA.Finance.Fact.Trade.Dvp
import DA.Finance.Types
import DA.Finance.Fact.Asset
import DA.Finance.Rule.Asset


import DA.RefApps.Bond.Redemption
import DA.List
import DA.Set as Set
import DA.Optional
import DA.Action
import DA.RefApps.Bond.Util


-- This template is used to collect the allocation details for a particular DvP created
-- from a successful bid
template AuctionSettleRequest
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    issuerCashAccount: Account
    issuerBondAssetDepositCid: ContractId AssetDeposit
    cashAmountToPay: Decimal
    regulators: [Party]
  where
    signatory investor, issuer
    observer regulators

template InvestorSettlementBotTrigger
  with
    investor: Party
    issuer: Party
    auctionAgent: Party
    auctionName: Text
    settleRequestCids: [ContractId AuctionSettleRequest]
    regulators: [Party]
  where
    signatory investor, issuer
    observer regulators

    controller investor can
      InvestorSettlementBotTrigger_Finalize: [ContractId RedemptionPayoutInfo]
        with
          bondAccount: Account
          auctionLockedCashCids: [ContractId AuctionLockedCash]
          cashAssetFungible: ContractId AssetFungible
        do

        -- unlock
          investorCashAssetDepositCids <- forA auctionLockedCashCids \lockCid -> do
            lock <- fetch lockCid
            assertMsg "Lock should be owned by the settling party" $ lock.owner == investor
            assertMsg "AuctionLockedCash should match the auction" $ lock.auctionName == auctionName && lock.auctionAgent == auctionAgent
            unlocked <- exercise lockCid AuctionLockedCash_Unlock
            return unlocked

          -- process all settle requests
          (_, payoutInfos) <- foldlA (\(remaining, redemptionPayouts) settleRequestCid -> do

          -- create DvP
            settleRequest <- fetch $ head settleRequestCids -- TODO
            bondAssetDeposit <- fetch settleRequest.issuerBondAssetDepositCid
            let firstCashAssetCid = head remaining
            firstCashAsset <- fetch firstCashAssetCid
            mergeResult <- mergeForQuantity firstCashAssetCid firstCashAsset (tail remaining) settleRequest.cashAmountToPay cashAssetFungible
            assertMsg "Locked cash should be sufficient to finalize settlement" $ isSome mergeResult
            let (cashMergedForQuantityCid, remainingNew)  = fromSome $ mergeResult
            cashMergedForQuantity <- fetch cashMergedForQuantityCid
            let masterAgreement = MasterAgreement with
                  id = Id with
                    signatories = Set.fromList [investor, issuer]
                    label = "DvPMasterSettleAuctionMaster"
                    version = 0
                  party1 = investor
                  party2 = issuer
                tradeId = Id with
                  signatories = Set.fromList [investor, issuer]
                  label = "DvPMasterSettleAuctionTrade"
                  version = 0
                delivery = bondAssetDeposit.asset
                payment = cashMergedForQuantity.asset

            dvpCid <- create Dvp with
              masterAgreement = masterAgreement
              tradeId = tradeId
              buyer = investor
              status = SettlementStatus_Pending
              settlementDate = None
              payments = [payment]
              deliveries = [delivery]
              observers = Set.fromList regulators

            issuerBondSettlement <- create AssetSettlement with
              account = bondAssetDeposit.account
              observers = Set.fromList regulators

            issuerCashSettlement <- create AssetSettlement with
              account = settleRequest.issuerCashAccount
              observers = Set.fromList regulators

            investorCashSettlement <- create AssetSettlement with
              account = cashMergedForQuantity.account
              observers = Set.fromList regulators

            investorBondSettlement <- create AssetSettlement with
              account = bondAccount
              observers = Set.fromList regulators

            let bondSettlementStep = AssetSettlementStep with
                    sender = issuer
                    receiver = investor
                    depositCid = None
                    creditSettlementCid = issuerBondSettlement
                    debitSettlementCid = investorBondSettlement

                cashSettlementStep = AssetSettlementStep with
                    sender = investor
                    receiver = issuer
                    depositCid = None
                    creditSettlementCid = investorCashSettlement
                    debitSettlementCid = issuerCashSettlement

            bondChain <- create AssetSettlementChain with
              masterAgreement = masterAgreement
              tradeId = tradeId
              asset = bondAssetDeposit.asset
              steps = [bondSettlementStep]
              observers = Set.fromList regulators

            cashChain <- create AssetSettlementChain with
              masterAgreement = masterAgreement
              tradeId = tradeId
              asset = cashMergedForQuantity.asset
              steps = [cashSettlementStep]
              observers = Set.fromList regulators

            allocatedBondChain <- exercise bondChain $ AssetSettlementChain_AllocateNext settleRequest.issuerBondAssetDepositCid

            allocatedCashChain <- exercise cashChain $ AssetSettlementChain_AllocateNext cashMergedForQuantityCid

            let settleParam = DvpSettlement_Process_Param with
                  dvpCid = dvpCid
                  paymentChainCids = [allocatedCashChain]
                  deliveryChainCids = [allocatedBondChain]

            dvpSettlement <- create DvpSettlement with
              masterAgreement = masterAgreement
              observers = Set.fromList regulators

            result <- exercise dvpSettlement DvpSettlement_Process1 with
              param = settleParam

            redemptionPayout <- create RedemptionPayoutInfo with
                  issuer = issuer
                  investor = investor
                  bondAccountProvider = bondAssetDeposit.account.provider
                  investorCashAccount = firstCashAsset.account
                  settlementResult = result
                  investorCashAssetSettlementCid = investorCashSettlement
                  regulators = regulators

            return (remainingNew, redemptionPayout :: redemptionPayouts)
            ) (investorCashAssetDepositCids, []) settleRequestCids

          forA settleRequestCids \sr -> archive sr
          return payoutInfos

-- Triggers the settlement bot which settles all the DvPs on behalf an investor party.
-- It unlocks all the previously locked cash, executes the payment, receives the bonds and
-- releases the remaining cash to the investor's account.

-- A marker template which assigns a `AssetLockedFact` to an auction, so the
-- settlement bot can collect the relevant locked cash assets to settle the outstanding DvPs.
template AuctionLockedCash
  with
    owner: Party
    auctionAgent: Party
    auctionName: Text
    lockedCashAssetDeposit: AssetDeposit
    regulators: [Party]
  where
    signatory owner
    observer regulators

    controller [owner, auctionAgent] can
      AuctionLockedCash_Unlock: ContractId AssetDeposit
        do
          create lockedCashAssetDeposit
