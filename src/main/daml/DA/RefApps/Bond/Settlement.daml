--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2
module DA.RefApps.Bond.Settlement where

import DA.Finance.OldTypes
import DA.Finance.Dvp.Fact
import DA.Finance.Asset.Fact
import DA.Finance.Asset.Lock
import DA.Finance.Asset.SplitAndMerge
import DA.Finance.Asset.Transfer.Bilateral
import DA.Finance.Account.Fact
import DA.Finance.Dvp.Settlement.Asymmetric

import DA.RefApps.Bond.Redemption
import DA.List
import DA.Map
import DA.Optional
import DA.Action
import DA.RefApps.Bond.Util

data AllocationResultData = AllocationResultData
  { dvpFactCid: ContractId DvpFact
  , allocationFactCid: ContractId DvpAllocationFact
  , dvpRuleCid: ContractId DvpRule
  , transferRuleCid: ContractId AssetTransferRule
  , buyer: Party
  , seller: Party
  , assetId: Text
  , quantity: Decimal
  , amount: Decimal
  , currency: Text
  } deriving (Eq, Show)

-- This template is used to collect the allocation details for a particular DvP created
-- from a successful bid
template AuctionSettleRequest
  with
    investor: Party
    issuer: Party
    bondAccountProvider: Party
    auctionAgent: Party
    auctionName: Text
    allocationResultData: AllocationResultData
    regulators: [Party]
  where
    signatory investor, issuer
    observer regulators

-- Triggers the settlement bot which settles all the DvPs on behalf an investor party.
-- It unlocks all the previously locked cash, executes the payment, receives the bonds and
-- releases the remaining cash to the investor's account.
template InvestorSettlementBotTrigger
  with
    investor: Party
    issuer: Party
    bondAccountProvider: Party
    auctionAgent: Party
    auctionName: Text
    settleRequestCids: [ContractId AuctionSettleRequest]
    cashProvider: Party
    deliveryInstrumentId: InstrumentId
    regulators: [Party]
  where
    signatory investor, issuer
    observer regulators

    controller investor can
      InvestorSettlementBotTrigger_Finalize: [(ContractId AssetFact, ContractId AssetFact, ContractId RedemptionPayoutInfo)]
        with
          deliveryTransferRuleCid: ContractId AssetTransferRule
          deliverySplitAndMergeRuleCid: ContractId AssetSplitAndMergeRule
          auctionLockedCashCids: [ContractId AuctionLockedCash]
          cashAccountCid: ContractId AccountFact
          assetTargetAccountFactCid: ContractId AccountFact
        do
          -- unlock
          possibleDeliveryFactCids <- forA auctionLockedCashCids \lockCid -> do
            lock <- fetch lockCid
            assertMsg "Lock should be owned by the settling party" $ lock.owner == investor
            assertMsg "AuctionLockedCash should match the auction" $ lock.auctionName == auctionName && lock.auctionAgent == auctionAgent
            unlocked <- exercise lock.lockedCashAssetCid AssetLockedFact_Unlock
            archive lockCid
            return unlocked

          -- process all settle requests
          (_, accountAndFacts) <- foldlA (\(remaining, accountsAndFacts) settleRequestCid -> do
            settleRequest <- fetch settleRequestCid
            dvpFact <- fetch settleRequest.allocationResultData.dvpFactCid
            assertMsg "The delivery legs should not be empty" $ size dvpFact.deliveryLegs > 0
            assertMsg "The auctionLockedCashCids should not be empty" $ length auctionLockedCashCids > 0
            -- merge until required quantity
            let requiredCashQuantity = (snd $ head $ toList dvpFact.deliveryLegs)
                firstAssetCid = head possibleDeliveryFactCids
            firstDeliveryAsset <- fetch firstAssetCid
            mergeResult <- mergeForQuantity firstAssetCid firstDeliveryAsset (tail possibleDeliveryFactCids) requiredCashQuantity deliverySplitAndMergeRuleCid
            -- As sufficient cash has been locked, the merge should succeed
            assertMsg "Locked cash should be sufficient to finalize settlement" $ isSome mergeResult
            let (cashMergedForQuantity, remaining)  = fromSome $ mergeResult
            (_, [paymentFactCid], [deliveryFactCid]) <- exercise settleRequest.allocationResultData.dvpRuleCid DvpRule_Settle2 with
              dvpFactCid = settleRequest.allocationResultData.dvpFactCid
              dvpAllocationFactCid = settleRequest.allocationResultData.allocationFactCid
              deliveryTransferRuleCids = [deliveryTransferRuleCid]
              deliveryFactCids = [cashMergedForQuantity]
              paymentTargetAccountFactCids = [assetTargetAccountFactCid]
            assetFact <- fetch paymentFactCid
            cashAccount <- fetch cashAccountCid
            redemptionPayout <- create RedemptionPayoutInfo with
                  issuer = dvpFact.buyer
                  investor = investor
                  bondAccountProvider = bondAccountProvider
                  cashAccountProvider = cashAccount.accountId.provider
                  cashAccountCid = cashAccountCid
                  bondAssetFactCid = paymentFactCid
                  bondInstrumentId = assetFact.assetId.instrumentId
                  regulators = regulators
            return (remaining, (paymentFactCid, deliveryFactCid, redemptionPayout) :: accountsAndFacts)
            ) (possibleDeliveryFactCids, []) settleRequestCids

          forA settleRequestCids \sr -> archive sr

          return accountAndFacts

-- A marker template which assigns a `AssetLockedFact` to an auction, so the
-- settlement bot can collect the relevant locked cash assets to settle the outstanding DvPs.
template AuctionLockedCash
  with
    owner: Party
    auctionAgent: Party
    auctionName: Text
    lockedCashAssetCid: ContractId AssetLockedFact
    regulators: [Party]
  where
    signatory owner
    observer regulators
