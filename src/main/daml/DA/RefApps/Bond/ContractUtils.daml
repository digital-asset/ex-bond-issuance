--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

module DA.RefApps.Bond.ContractUtils where

import DA.Optional
import DA.List.Total

import DA.Finance.Asset
import DA.Finance.Asset.Settlement

import DA.Finance.Types

import DA.RefApps.Bond.Lock

type Contract a = (ContractId a, a)

class Template a => HasAccount a where
  accountOf: a -> Account

instance HasAccount AssetSettlementRule where
  accountOf t = t.account

instance HasAccount AssetDeposit where
  accountOf t = t.account

headNote: Text -> [a] -> a
headNote message = (fromSomeNote message) . head

findAsset: (HasAccount a) => Party -> Party -> [Contract a] -> Contract a
findAsset provider owner assets =
  findAsset' [provider] owner assets

findAsset': (HasAccount a) => [Party] -> Party -> [Contract a] -> Contract a
findAsset' providers owner assets =
  headNote "Can't find any asset contract" $
    filterContracts (accountBelongsToAnyOf providers owner) assets

accountBelongsToAnyOf: (HasAccount a) => [Party] -> Party -> a -> Bool
accountBelongsToAnyOf providers owner a = do
  let account = accountOf a
  account.provider `elem` providers && owner == account.owner

findAuctionLockedCashes: [Contract AuctionLockedCash] -> Party -> Text -> [Contract AuctionLockedCash]
findAuctionLockedCashes auctionLockedCashes auctionAgent auctionName =
  filterContracts (auctionBelongsTo auctionAgent auctionName) auctionLockedCashes

auctionBelongsTo: Party -> Text -> AuctionLockedCash -> Bool
auctionBelongsTo auctionAgent auctionName auction =
     auctionAgent == auction.auctionAgent
  && auctionName == auction.auctionName

filterContracts: (a -> Bool) -> [Contract a] -> [Contract a]
filterContracts p contracts = [ contract | contract@(_, value) <- contracts, p value]
