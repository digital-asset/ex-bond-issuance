--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2 module DA.Finance.Dvp.Settlement.Asymmetric where

import DA.Finance.Account.Fact
import DA.Finance.Asset.Fact
import DA.Finance.Asset.Lock
import DA.Finance.Asset.Transfer.Bilateral
import DA.Finance.Dvp.Fact
import DA.Finance.OldTypes
import DA.Finance.Utility

import DA.Map

-- DvpRule
-- A delivery versus payment (DvpRule) settlement method. It allows 2 parties to
-- exchange assets atomicly at (or after) a predefined settlement date. The
-- DvpRule is assymmetric: first the buyer and than the seller has to act.
template DvpRule
  with
    actor1: Party
    actor2: Party
    observers: [Party]
  where
    signatory actor1, actor2
    observer observers
    controller actor1 can
      nonconsuming DvpRule_Allocate1: (ContractId DvpFact, ContractId DvpAllocationFact)
        with dvpFactCid: ContractId DvpFact
             assetLockRuleCids: [(ContractId AssetLockRule)]
             paymentTransferRuleCids : [(ContractId AssetTransferRule)]
             paymentFactCids: [(ContractId AssetFact)]
             deliveryTargetAccountFactCids: [(ContractId AccountFact)]
                do allocate actor1 actor2 dvpFactCid assetLockRuleCids paymentTransferRuleCids paymentFactCids deliveryTargetAccountFactCids observers
      nonconsuming DvpRule_Deallocate1: (ContractId DvpFact, [(ContractId AssetFact)])
        with
            dvpFactCid: ContractId DvpFact
            dvpAllocationFactCid: ContractId DvpAllocationFact
                do deallocate actor1 actor2 dvpFactCid dvpAllocationFactCid
      nonconsuming DvpRule_Settle1: (ContractId DvpFact, [(ContractId AssetFact)], [(ContractId AssetFact)])
        with dvpFactCid: ContractId DvpFact
             dvpAllocationFactCid: ContractId DvpAllocationFact
             deliveryTransferRuleCids: [(ContractId AssetTransferRule)]
             deliveryFactCids: [(ContractId AssetFact)]
             paymentTargetAccountFactCids: [(ContractId AccountFact)]
                do settle actor2 actor1 dvpFactCid dvpAllocationFactCid deliveryTransferRuleCids deliveryFactCids paymentTargetAccountFactCids
    controller actor2 can
      nonconsuming DvpRule_Allocate2: (ContractId DvpFact, ContractId DvpAllocationFact)
        with dvpFactCid: ContractId DvpFact
             assetLockRuleCids: [(ContractId AssetLockRule)]
             paymentTransferRuleCids: [(ContractId AssetTransferRule)]
             paymentFactCids: [(ContractId AssetFact)]
             deliveryTargetAccountFactCids: [(ContractId AccountFact)]
              do allocate actor2 actor1 dvpFactCid assetLockRuleCids paymentTransferRuleCids paymentFactCids deliveryTargetAccountFactCids observers
      nonconsuming DvpRule_Deallocate2: (ContractId DvpFact, [(ContractId AssetFact)])
        with
          dvpFactCid: ContractId DvpFact
          dvpAllocationFactCid: ContractId DvpAllocationFact
            do deallocate actor2 actor1 dvpFactCid dvpAllocationFactCid
      nonconsuming DvpRule_Settle2: (ContractId DvpFact, [(ContractId AssetFact)], [(ContractId AssetFact)])
        with dvpFactCid: ContractId DvpFact
             dvpAllocationFactCid: ContractId DvpAllocationFact
             deliveryTransferRuleCids: [(ContractId AssetTransferRule)]
             deliveryFactCids: [(ContractId AssetFact)]
             paymentTargetAccountFactCids: [(ContractId AccountFact)]
              do settle actor1 actor2 dvpFactCid dvpAllocationFactCid deliveryTransferRuleCids deliveryFactCids paymentTargetAccountFactCids
    controller [actor1, actor2] can
      -- allows for immediate settlement at any time (as long as buyer and seller agree)
      nonconsuming DvpRule_AllocateAndSettle: (ContractId DvpFact, [(ContractId AssetFact)], [(ContractId AssetFact)])
        with
          dvpFactCid: ContractId DvpFact
          paymentTransferRuleCids: [(ContractId AssetTransferRule)]
          paymentFactCids: [(ContractId AssetFact)]
          deliveryTransferRuleCids: [(ContractId AssetTransferRule)]
          deliveryFactCids: [(ContractId AssetFact)]
          paymentTargetAccountFactCids: [(ContractId AccountFact)]
          deliveryTargetAccountFactCids: [(ContractId AccountFact)]
            do
              dvpFact <- fetch dvpFactCid
              let buyer = if actor1 == dvpFact.buyer then actor1 else actor2
                  seller = if actor1 == dvpFact.buyer then actor2 else actor1
              oneTimePaymentTransferRuleCids <- forA paymentTransferRuleCids (\cid -> exercise cid $ AssetTransferRule_PrepareFor buyer)
              atomicSwapWithChecks False buyer seller dvpFactCid oneTimePaymentTransferRuleCids paymentFactCids paymentTargetAccountFactCids deliveryTransferRuleCids deliveryFactCids deliveryTargetAccountFactCids

-- DvpAllocation
-- A data contract keeping the allocation state
template DvpAllocationFact
  with
    tradeId: Text
    buyer: Party
    seller: Party
    observers: [Party]
    -- state:
    paymentTransferRuleCids: [(ContractId OneTimeAssetTransferRule)]
    paymentFactCids: [(ContractId AssetLockedFact)]
    deliveryTargetAccountFactCids: [(ContractId AccountFact)]
  where
    signatory buyer, seller
    observer observers

-- DvpRuleRequest
-- A request template for entering into a DvpRule
template DvpRuleRequest
  with
    actor1: Party
    actor2: Party
    observers: [Party]
  where
    signatory actor1
    controller actor2 can
      DvpRuleRequest_Accept: ContractId DvpRule
        do create DvpRule with actor1; actor2; observers
      DvpRuleRequest_Reject: ()
        do return ()
    controller actor1 can
      DvpRuleRequest_Cancel: ()
        do return ()

getAndCheckDvpAllocationFact
    (buyer: Party)
    (seller: Party)
    (tradeId: Text)
    (dvpAllocationFactCid: ContractId DvpAllocationFact)
    =
    do
      dvpAllocationFact <- fetch dvpAllocationFactCid
      assertMsg "dvpAllocationFact matches" (
              dvpAllocationFact.buyer == buyer && dvpAllocationFact.seller == seller
          && dvpAllocationFact.tradeId == tradeId)
      return dvpAllocationFact

allocate
    (buyer: Party)
    (seller: Party)
    (dvpFactCid: ContractId DvpFact)
    (assetLockRuleCids: [(ContractId AssetLockRule)])
    (paymentTransferRuleCids: [(ContractId AssetTransferRule)])
    (paymentFactCids: [(ContractId AssetFact)])
    (deliveryTargetAccountFactCids: [(ContractId AccountFact)])
    (observers: [Party])
    =
    do
        dvpFact <- dvpFactMatches buyer seller dvpFactCid
        assertMsg "has not yet been allocated" (dvpFact.status == Instructed)
        dvpFactCid <- setDvpFactStatus buyer seller dvpFactCid Pending
        -- Allocation
        assetsAndAccountsMatchLegs dvpFact.paymentLegs paymentFactCids dvpFact.deliveryLegs deliveryTargetAccountFactCids
        -- Validate target accounts have same provider as in legs (as not being transferred immediately)
        let
            accountMatches (accountFactWithQuantity: (ContractId AccountFact, (InstrumentKey, Decimal))) =
              do
                account <- fetch accountFactWithQuantity._1
                assertMsg "provider matches" (account.accountId.provider == accountFactWithQuantity._2._1.provider)
        mapA accountMatches (zip deliveryTargetAccountFactCids (toList dvpFact.deliveryLegs))
        -- locking
        assertMsg "assetFact locks and payment legs are of same length" (length assetLockRuleCids == size dvpFact.paymentLegs)
        cids <- mapA (lock seller) (zip paymentFactCids assetLockRuleCids)
        -- transfers
        assertMsg "assetFact transfer cids has same size as paymentLegs" (length paymentTransferRuleCids == size dvpFact.paymentLegs)
        -- create OneTimeAssetTransferRules for buyer
        newPaymentTransferRuleCids <- forA paymentTransferRuleCids (\cid -> exercise cid $ AssetTransferRule_PrepareFor buyer)
        -- state
        dvpAllocationFactCid <- create DvpAllocationFact with
          tradeId = dvpFact.tradeId
          buyer = buyer
          seller = seller
          observers = observers
          paymentTransferRuleCids = newPaymentTransferRuleCids
          paymentFactCids = cids
          deliveryTargetAccountFactCids = deliveryTargetAccountFactCids
        return (dvpFactCid, dvpAllocationFactCid)

deallocate (buyer: Party) (seller: Party)
    (dvpFactCid: ContractId DvpFact)
    (dvpAllocationFactCid: ContractId DvpAllocationFact)
    =
    do
        dvpFact <- dvpFactMatches buyer seller dvpFactCid
        assertMsg "has been allocated" (dvpFact.status == Pending)
        dvpAllocationFact <- getAndCheckDvpAllocationFact buyer seller dvpFact.tradeId dvpAllocationFactCid
        dvpFactCid <- setDvpFactStatus buyer seller dvpFactCid Instructed
        -- unlock
        paymentFactCids <- unlock dvpAllocationFact.paymentFactCids
        -- reset
        archive dvpAllocationFactCid
        return (dvpFactCid, paymentFactCids)
settle
    (buyer: Party)
    (seller: Party)
    (dvpFactCid: ContractId DvpFact)
    (dvpAllocationFactCid: ContractId DvpAllocationFact)
    (deliveryTransferRuleCids: [(ContractId AssetTransferRule)])
    (deliveryFactCids: [(ContractId AssetFact)])
    (paymentTargetAccountFactCids: [(ContractId AccountFact)])
    =
    do
        -- Check DvpFact
        dvpFact <- dvpFactMatches buyer seller dvpFactCid
        dvpFactCid <- setDvpFactStatus buyer seller dvpFactCid Settled
        -- State
        dvpAllocationFact <- getAndCheckDvpAllocationFact buyer seller dvpFact.tradeId dvpAllocationFactCid
        archive dvpAllocationFactCid
        -- Check time
        isDue dvpFact.settlementDate
        -- Check settle
        assetsAndAccountsMatchLegs dvpFact.deliveryLegs deliveryFactCids dvpFact.paymentLegs paymentTargetAccountFactCids
        -- Transfers
        assertMsg "delivery transfer cids have same length as deliveryFactCids" (length deliveryTransferRuleCids == length deliveryFactCids)
        -- Unlock and transfer assets
        paymentFactCids <- unlock dvpAllocationFact.paymentFactCids
        (paymentFactCids, deliveryFactCids) <- atomicSwap dvpAllocationFact.paymentTransferRuleCids paymentFactCids paymentTargetAccountFactCids deliveryTransferRuleCids deliveryFactCids dvpAllocationFact.deliveryTargetAccountFactCids
        return (dvpFactCid, paymentFactCids, deliveryFactCids)
